package android.support.test.espresso.base;

import android.support.test.espresso.Root;
import android.support.test.espresso.UiController;
import android.support.test.runner.lifecycle.ActivityLifecycleMonitor;
import dagger.internal.Factory;
import java.util.concurrent.atomic.AtomicReference;
import javax.annotation.Generated;
import javax.inject.Provider;
import org.hamcrest.Matcher;

@Generated("dagger.internal.codegen.ComponentProcessor")
public final class RootViewPicker_Factory implements Factory<RootViewPicker> {
  private final Provider<ActiveRootLister> activeRootListerProvider;
  private final Provider<UiController> uiControllerProvider;
  private final Provider<ActivityLifecycleMonitor> activityLifecycleMonitorProvider;
  private final Provider<AtomicReference<Matcher<Root>>> rootMatcherRefProvider;

  public RootViewPicker_Factory(Provider<ActiveRootLister> activeRootListerProvider, Provider<UiController> uiControllerProvider, Provider<ActivityLifecycleMonitor> activityLifecycleMonitorProvider, Provider<AtomicReference<Matcher<Root>>> rootMatcherRefProvider) {  
    assert activeRootListerProvider != null;
    this.activeRootListerProvider = activeRootListerProvider;
    assert uiControllerProvider != null;
    this.uiControllerProvider = uiControllerProvider;
    assert activityLifecycleMonitorProvider != null;
    this.activityLifecycleMonitorProvider = activityLifecycleMonitorProvider;
    assert rootMatcherRefProvider != null;
    this.rootMatcherRefProvider = rootMatcherRefProvider;
  }

  @Override
  public RootViewPicker get() {  
    return new RootViewPicker(activeRootListerProvider.get(), uiControllerProvider.get(), activityLifecycleMonitorProvider.get(), rootMatcherRefProvider.get());
  }

  public static Factory<RootViewPicker> create(Provider<ActiveRootLister> activeRootListerProvider, Provider<UiController> uiControllerProvider, Provider<ActivityLifecycleMonitor> activityLifecycleMonitorProvider, Provider<AtomicReference<Matcher<Root>>> rootMatcherRefProvider) {  
    return new RootViewPicker_Factory(activeRootListerProvider, uiControllerProvider, activityLifecycleMonitorProvider, rootMatcherRefProvider);
  }
}

