package android.support.test.espresso.base;

import android.support.test.espresso.FailureHandler;
import android.support.test.espresso.base.BaseLayerModule.FailureHandlerHolder;
import dagger.internal.Factory;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated("dagger.internal.codegen.ComponentProcessor")
public final class BaseLayerModule_ProvideFailureHandlerFactory implements Factory<FailureHandler> {
  private final BaseLayerModule module;
  private final Provider<FailureHandlerHolder> holderProvider;

  public BaseLayerModule_ProvideFailureHandlerFactory(BaseLayerModule module, Provider<FailureHandlerHolder> holderProvider) {  
    assert module != null;
    this.module = module;
    assert holderProvider != null;
    this.holderProvider = holderProvider;
  }

  @Override
  public FailureHandler get() {  
    FailureHandler provided = module.provideFailureHandler(holderProvider.get());
    if (provided == null) {
      throw new NullPointerException("Cannot return null from a non-@Nullable @Provides method");
    }
    return provided;
  }

  public static Factory<FailureHandler> create(BaseLayerModule module, Provider<FailureHandlerHolder> holderProvider) {  
    return new BaseLayerModule_ProvideFailureHandlerFactory(module, holderProvider);
  }
}

