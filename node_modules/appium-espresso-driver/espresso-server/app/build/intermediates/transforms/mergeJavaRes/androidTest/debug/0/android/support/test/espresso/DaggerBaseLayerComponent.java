package android.support.test.espresso;

import android.os.Looper;
import android.support.test.espresso.base.ActiveRootLister;
import android.support.test.espresso.base.BaseLayerModule;
import android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder_Factory;
import android.support.test.espresso.base.BaseLayerModule.FailureHandlerHolder;
import android.support.test.espresso.base.BaseLayerModule_ProvideActiveRootListerFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideCompatAsyncTaskMonitorFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideEventInjectorFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideFailureHanderFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideFailureHandlerFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideLifecycleMonitorFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideMainLooperFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideMainThreadExecutorFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideRecyclerFactory;
import android.support.test.espresso.base.BaseLayerModule_ProvideSdkAsyncTaskMonitorFactory;
import android.support.test.espresso.base.DaggerBaseLayerComponent_PackageProxy;
import android.support.test.espresso.base.IdlingResourceRegistry;
import android.support.test.espresso.base.IdlingResourceRegistry_Factory;
import android.support.test.espresso.base.RootViewPicker;
import android.support.test.espresso.base.RootViewPicker_Factory;
import android.support.test.espresso.base.RootsOracle_Factory;
import android.support.test.espresso.base.ThreadPoolExecutorExtractor_Factory;
import android.support.test.espresso.base.UiControllerImpl_Factory;
import android.support.test.espresso.base.UiControllerModule;
import android.support.test.espresso.base.UiControllerModule_ProvideUiControllerFactory;
import android.support.test.espresso.base.ViewFinderImpl;
import android.support.test.espresso.base.ViewFinderImpl_Factory;
import android.support.test.runner.lifecycle.ActivityLifecycleMonitor;
import android.view.View;
import dagger.internal.ScopedProvider;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicReference;
import javax.annotation.Generated;
import javax.inject.Provider;
import org.hamcrest.Matcher;

@Generated("dagger.internal.codegen.ComponentProcessor")
public final class DaggerBaseLayerComponent implements BaseLayerComponent {
  private Provider<FailureHandler> provideFailureHanderProvider;
  private Provider<FailureHandlerHolder> failureHandlerHolderProvider;
  private Provider<FailureHandler> provideFailureHandlerProvider;
  private Provider<Looper> provideMainLooperProvider;
  private final DaggerBaseLayerComponent_PackageProxy android_support_test_espresso_base_Proxy = new DaggerBaseLayerComponent_PackageProxy();
  private Provider<ActiveRootLister> provideActiveRootListerProvider;
  private Provider<IdlingResourceRegistry> idlingResourceRegistryProvider;
  private Provider<UiController> provideUiControllerProvider;
  private Provider<ActivityLifecycleMonitor> provideLifecycleMonitorProvider;
  private Provider<Executor> provideMainThreadExecutorProvider;

  private DaggerBaseLayerComponent(Builder builder) {  
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {  
    return new Builder();
  }

  public static BaseLayerComponent create() {  
    return builder().build();
  }

  private void initialize(final Builder builder) {  
    this.provideFailureHanderProvider = BaseLayerModule_ProvideFailureHanderFactory.create(builder.baseLayerModule);
    this.failureHandlerHolderProvider = ScopedProvider.create(BaseLayerModule$FailureHandlerHolder_Factory.create(provideFailureHanderProvider));
    this.provideFailureHandlerProvider = BaseLayerModule_ProvideFailureHandlerFactory.create(builder.baseLayerModule, failureHandlerHolderProvider);
    this.provideMainLooperProvider = ScopedProvider.create(BaseLayerModule_ProvideMainLooperFactory.create(builder.baseLayerModule));
    this.android_support_test_espresso_base_Proxy.rootsOracleProvider = ScopedProvider.create(RootsOracle_Factory.create(provideMainLooperProvider));
    this.provideActiveRootListerProvider = ScopedProvider.create(BaseLayerModule_ProvideActiveRootListerFactory.create(builder.baseLayerModule, android_support_test_espresso_base_Proxy.rootsOracleProvider));
    this.idlingResourceRegistryProvider = ScopedProvider.create(IdlingResourceRegistry_Factory.create(provideMainLooperProvider));
    this.android_support_test_espresso_base_Proxy.provideEventInjectorProvider = ScopedProvider.create(BaseLayerModule_ProvideEventInjectorFactory.create(builder.baseLayerModule));
    this.android_support_test_espresso_base_Proxy.threadPoolExecutorExtractorProvider = ScopedProvider.create(ThreadPoolExecutorExtractor_Factory.create(provideMainLooperProvider));
    this.android_support_test_espresso_base_Proxy.provideSdkAsyncTaskMonitorProvider = ScopedProvider.create(BaseLayerModule_ProvideSdkAsyncTaskMonitorFactory.create(builder.baseLayerModule, android_support_test_espresso_base_Proxy.threadPoolExecutorExtractorProvider));
    this.android_support_test_espresso_base_Proxy.provideCompatAsyncTaskMonitorProvider = ScopedProvider.create(BaseLayerModule_ProvideCompatAsyncTaskMonitorFactory.create(builder.baseLayerModule, android_support_test_espresso_base_Proxy.threadPoolExecutorExtractorProvider));
    this.android_support_test_espresso_base_Proxy.provideRecyclerProvider = BaseLayerModule_ProvideRecyclerFactory.create(builder.baseLayerModule);
    this.android_support_test_espresso_base_Proxy.uiControllerImplProvider = ScopedProvider.create(UiControllerImpl_Factory.create(android_support_test_espresso_base_Proxy.provideEventInjectorProvider, android_support_test_espresso_base_Proxy.provideSdkAsyncTaskMonitorProvider, android_support_test_espresso_base_Proxy.provideCompatAsyncTaskMonitorProvider, idlingResourceRegistryProvider, provideMainLooperProvider, android_support_test_espresso_base_Proxy.provideRecyclerProvider));
    this.provideUiControllerProvider = UiControllerModule_ProvideUiControllerFactory.create(builder.uiControllerModule, android_support_test_espresso_base_Proxy.uiControllerImplProvider);
    this.provideLifecycleMonitorProvider = ScopedProvider.create(BaseLayerModule_ProvideLifecycleMonitorFactory.create(builder.baseLayerModule));
    this.provideMainThreadExecutorProvider = ScopedProvider.create(BaseLayerModule_ProvideMainThreadExecutorFactory.create(builder.baseLayerModule, provideMainLooperProvider));
  }

  @Override
  public FailureHandlerHolder failureHolder() {  
    return failureHandlerHolderProvider.get();
  }

  @Override
  public FailureHandler failureHandler() {  
    return provideFailureHandlerProvider.get();
  }

  @Override
  public ActiveRootLister activeRootLister() {  
    return provideActiveRootListerProvider.get();
  }

  @Override
  public IdlingResourceRegistry idlingResourceRegistry() {  
    return idlingResourceRegistryProvider.get();
  }

  @Override
  public ViewInteractionComponent plus(ViewInteractionModule module) {  
    return new ViewInteractionComponentImpl(module);
  }

  public static final class Builder {
    private BaseLayerModule baseLayerModule;
    private UiControllerModule uiControllerModule;
  
    private Builder() {  
    }
  
    public BaseLayerComponent build() {  
      if (baseLayerModule == null) {
        this.baseLayerModule = new BaseLayerModule();
      }
      if (uiControllerModule == null) {
        this.uiControllerModule = new UiControllerModule();
      }
      return new DaggerBaseLayerComponent(this);
    }
  
    public Builder baseLayerModule(BaseLayerModule baseLayerModule) {  
      if (baseLayerModule == null) {
        throw new NullPointerException("baseLayerModule");
      }
      this.baseLayerModule = baseLayerModule;
      return this;
    }
  
    public Builder uiControllerModule(UiControllerModule uiControllerModule) {  
      if (uiControllerModule == null) {
        throw new NullPointerException("uiControllerModule");
      }
      this.uiControllerModule = uiControllerModule;
      return this;
    }
  }

  private final class ViewInteractionComponentImpl implements ViewInteractionComponent {
    private final ViewInteractionModule viewInteractionModule;
    private Provider<Matcher<View>> provideViewMatcherProvider;
    private Provider<AtomicReference<Matcher<Root>>> provideRootMatcherProvider;
    private Provider<RootViewPicker> rootViewPickerProvider;
    private Provider<View> provideRootViewProvider;
    private Provider<ViewFinderImpl> viewFinderImplProvider;
    private Provider<ViewFinder> provideViewFinderProvider;
    private Provider<ViewInteraction> viewInteractionProvider;
  
    private ViewInteractionComponentImpl(ViewInteractionModule viewInteractionModule) {  
      if (viewInteractionModule == null) {
        throw new NullPointerException();
      }
      this.viewInteractionModule = viewInteractionModule;
      initialize();
    }
  
    private void initialize() {  
      this.provideViewMatcherProvider = ViewInteractionModule_ProvideViewMatcherFactory.create(viewInteractionModule);
      this.provideRootMatcherProvider = ViewInteractionModule_ProvideRootMatcherFactory.create(viewInteractionModule);
      this.rootViewPickerProvider = ScopedProvider.create(RootViewPicker_Factory.create(DaggerBaseLayerComponent.this.provideActiveRootListerProvider, DaggerBaseLayerComponent.this.provideUiControllerProvider, DaggerBaseLayerComponent.this.provideLifecycleMonitorProvider, provideRootMatcherProvider));
      this.provideRootViewProvider = ViewInteractionModule_ProvideRootViewFactory.create(viewInteractionModule, rootViewPickerProvider);
      this.viewFinderImplProvider = ViewFinderImpl_Factory.create(provideViewMatcherProvider, provideRootViewProvider);
      this.provideViewFinderProvider = ViewInteractionModule_ProvideViewFinderFactory.create(viewInteractionModule, viewFinderImplProvider);
      this.viewInteractionProvider = ViewInteraction_Factory.create(DaggerBaseLayerComponent.this.provideUiControllerProvider, provideViewFinderProvider, DaggerBaseLayerComponent.this.provideMainThreadExecutorProvider, DaggerBaseLayerComponent.this.provideFailureHandlerProvider, provideViewMatcherProvider, provideRootMatcherProvider);
    }
  
    @Override
    public ViewInteraction viewInteraction() {  
      return viewInteractionProvider.get();
    }
  }
}

