'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _espressoRunner = require('./espresso-runner');

var _espressoRunner2 = _interopRequireDefault(_espressoRunner);

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

var _appiumAdb = require('appium-adb');

var _appiumAndroidDriver = require('appium-android-driver');

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var _packageJson = require('../../package.json');

// eslint-disable-line import/no-unresolved

var _portscanner = require('portscanner');

// TODO merge our own helpers onto this later
var helpers = _appiumAndroidDriver.androidHelpers;

// The range of ports we can use on the system for communicating to the
// Espresso HTTP server on the device
var SYSTEM_PORT_RANGE = [8300, 8399];

// This is the port that the espresso server listens to on the device. We will
// forward one of the ports above on the system to this port on the device.
var DEVICE_PORT = 8080;

// NO_PROXY contains the paths that we never want to proxy to espresso server.
// TODO:  Add the list of paths that we never want to proxy to espresso server.
// TODO: Need to segregate the paths better way using regular expressions wherever applicable.
// (Not segregating right away because more paths to be added in the NO_PROXY list)
var NO_PROXY = [
// TODO: uncomment these when support is added, and if the espresso server
// does not handle them on its own
//['POST', new RegExp('^/session/[^/]+/touch/multi/perform')],
//['POST', new RegExp('^/session/[^/]+/touch/perform')],
//['POST', new RegExp('^/session/[^/]+/element')],
//['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/value')],
//['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/replace_value')],
['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_activity')],
//['POST', new RegExp('^/session/[^/]+/appium/[^/]+/start_activity')],
//['POST', new RegExp('^/session/[^/]+/app/[^/]')],
//['POST', new RegExp('^/session/[^/]+/location')],
//['GET', new RegExp('^/session/[^/]+/appium/device/system_time')],
//['POST', new RegExp('^/session/[^/]+/appium/settings')],
//['GET', new RegExp('^/session/[^/]+/appium/settings')],
//['POST', new RegExp('^/session/[^/]+/appium/device/app_installed')],
//['POST', new RegExp('^/session/[^/]+/appium/device/lock')],
//['POST', new RegExp('^/session/[^/]+/appium/app/close')],
//['POST', new RegExp('^/session/[^/]+/appium/app/launch')],
//['POST', new RegExp('^/session/[^/]+/appium/device/pull_file')],
//['POST', new RegExp('^/session/[^/]+/appium/device/push_file')],
//['POST', new RegExp('^/session/[^/]+/appium/app/reset')],
//['POST', new RegExp('^/session/[^/]+/appium/app/background')],
//['POST', new RegExp('^/session/[^/]+/appium/device/toggle_location_services')],
//['POST', new RegExp('^/session/[^/]+/appium/device/is_locked')],
//['POST', new RegExp('^/session/[^/]+/appium/device/unlock')],
//['POST', new RegExp('^/session/[^/]+/appium/app/end_test_coverage')],
//['GET', new RegExp('^/session/[^/]+/contexts')],
//['POST', new RegExp('^/session/[^/]+/context')],
//['GET', new RegExp('^/session/[^/]+/context')],
//['POST', new RegExp('^/session/[^/]+/network_connection')],
//['GET', new RegExp('^/session/[^/]+/network_connection')],
//['POST', new RegExp('^/session/[^/]+/timeouts')],
//['GET', new RegExp('^/session/[^/]+/screenshot')],
//['GET', new RegExp('^/session/[^/]+/element/[^/]+/attribute')],
//['GET', new RegExp('^/session/[^/]+/element/[^/]+/enabled')],
//['GET', new RegExp('^/session/[^/]+/element/[^/]+/selected')],
//['GET', new RegExp('^/session/[^/]+/element/[^/]+/displayed')],
['GET', new RegExp('^/session/(?!.*\/)')]];

//['POST', new RegExp('^/session/[^/]+/keys')],
//['POST', new RegExp('^/session/[^/]+/appium/device/hide_keyboard')],
//['POST', new RegExp('^/session/[^/]+/log')],
//['POST', new RegExp('^/session/[^/]+/appium/device/remove_app')],
//['GET', new RegExp('^/session/[^/]+/appium/device/is_keyboard_shown')]
var APP_EXTENSION = '.apk';

var EspressoDriver = (function (_BaseDriver) {
  _inherits(EspressoDriver, _BaseDriver);

  function EspressoDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, EspressoDriver);

    // `shell` overwrites adb.shell, so remove
    delete opts.shell;

    _get(Object.getPrototypeOf(EspressoDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);
    this.locatorStrategies = ['id', 'class name', 'accessibility id'];
    this.desiredCapConstraints = _desiredCaps2['default'];
    this.espresso = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;

    this.apkStrings = {}; // map of language -> strings obj
  }

  // first add the android-driver commands which we will fall back to

  _createClass(EspressoDriver, [{
    key: 'createSession',
    value: function createSession(caps) {
      var sessionId, _ref, _ref2, serverDetails, defaultOpts;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            sessionId = undefined;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(EspressoDriver.prototype), 'createSession', this).call(this, caps));

          case 4:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];
            serverDetails = {
              platform: 'LINUX',
              webStorageEnabled: false,
              takesScreenshot: true,
              javascriptEnabled: true,
              databaseEnabled: false,
              networkConnectionEnabled: true,
              locationContextEnabled: false,
              warnings: {},
              desired: _Object$assign({}, this.caps)
            };

            this.caps = _Object$assign(serverDetails, this.caps);

            defaultOpts = {
              fullReset: false,
              autoLaunch: true,
              adbPort: _appiumAdb.DEFAULT_ADB_PORT,
              androidInstallTimeout: 90000,
              systemPort: 8080
            };

            _lodash2['default'].defaults(this.opts, defaultOpts);

            if (this.opts.reboot) {
              this.setAvdFromCapabilities(caps);
              this.addWipeDataToAvdArgs();
            }

            if (!this.opts.app) {
              context$2$0.next = 20;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, APP_EXTENSION));

          case 15:
            this.opts.app = context$2$0.sent;
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.checkAppPresent());

          case 18:
            context$2$0.next = 24;
            break;

          case 20:
            if (!this.appOnDevice) {
              context$2$0.next = 24;
              break;
            }

            // the app isn't an actual app file but rather something we want to
            // assume is on the device and just launch via the appPackage
            _logger2['default'].info('App file was not listed, instead we\'re going to run ' + (this.opts.appPackage + ' directly on the device'));
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(this.checkPackagePresent());

          case 24:
            context$2$0.t0 = this.opts.systemPort;

            if (context$2$0.t0) {
              context$2$0.next = 29;
              break;
            }

            context$2$0.next = 28;
            return _regeneratorRuntime.awrap((0, _portscanner.findAPortNotInUse)(SYSTEM_PORT_RANGE[0], SYSTEM_PORT_RANGE[1]));

          case 28:
            context$2$0.t0 = context$2$0.sent;

          case 29:
            this.opts.systemPort = context$2$0.t0;

            this.opts.adbPort = this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
            context$2$0.next = 33;
            return _regeneratorRuntime.awrap(this.startEspressoSession());

          case 33:
            return context$2$0.abrupt('return', [sessionId, caps]);

          case 36:
            context$2$0.prev = 36;
            context$2$0.t1 = context$2$0['catch'](0);
            context$2$0.next = 40;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 40:
            throw context$2$0.t1;

          case 41:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 36]]);
    }
  }, {
    key: 'isEmulator',
    value: function isEmulator() {
      return !!this.opts.avd;
    }

    // TODO this method is duplicated from uiautomator2-driver; consolidate
  }, {
    key: 'setAvdFromCapabilities',
    value: function setAvdFromCapabilities(caps) {
      if (this.opts.avd) {
        _logger2['default'].info('avd name defined, ignoring device name and platform version');
      } else {
        if (!caps.deviceName) {
          _logger2['default'].errorAndThrow('avd or deviceName should be specified when reboot option is enables');
        }
        if (!caps.platformVersion) {
          _logger2['default'].errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
        }
        var avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, "-");
        this.opts.avd = avdDevice + '__' + caps.platformVersion;
      }
    }

    // TODO this method is duplicated from uiautomator2-driver; consolidate
  }, {
    key: 'addWipeDataToAvdArgs',
    value: function addWipeDataToAvdArgs() {
      if (!this.opts.avdArgs) {
        this.opts.avdArgs = '-wipe-data';
      } else if (this.opts.avdArgs.toLowerCase().indexOf("-wipe-data") === -1) {
        this.opts.avdArgs += ' -wipe-data';
      }
    }

    // TODO much of this logic is duplicated from uiautomator2
  }, {
    key: 'startEspressoSession',
    value: function startEspressoSession() {
      var _ref3,

      // get device udid for this session
      udid, emPort, appInfo;

      return _regeneratorRuntime.async(function startEspressoSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:

            _logger2['default'].info('EspressoDriver version: ' + _packageJson.version);

            if (this.opts.javaVersion) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(helpers.getJavaVersion());

          case 4:
            this.opts.javaVersion = context$2$0.sent;

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(helpers.getDeviceInfoFromCaps(this.opts));

          case 7:
            _ref3 = context$2$0.sent;
            udid = _ref3.udid;
            emPort = _ref3.emPort;

            this.opts.udid = udid;
            this.opts.emPort = emPort;

            // now that we know our java version and device info, we can create our
            // ADB instance
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(_appiumAndroidDriver.androidHelpers.createADB(this.opts.javaVersion, this.opts.udid, this.opts.emPort, this.opts.adbPort));

          case 14:
            this.adb = context$2$0.sent;
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(helpers.getLaunchInfo(this.adb, this.opts));

          case 17:
            appInfo = context$2$0.sent;

            // and get it onto our 'opts' object so we use it from now on
            _Object$assign(this.opts, appInfo);

            // set actual device name, udid, platform version, screen size, model and manufacturer details
            this.caps.deviceName = this.adb.curDeviceId;
            this.caps.deviceUDID = this.opts.udid;
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(this.adb.getPlatformVersion());

          case 23:
            this.caps.platformVersion = context$2$0.sent;
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.adb.getScreenSize());

          case 26:
            this.caps.deviceScreenSize = context$2$0.sent;
            context$2$0.next = 29;
            return _regeneratorRuntime.awrap(this.adb.getModel());

          case 29:
            this.caps.deviceModel = context$2$0.sent;
            context$2$0.next = 32;
            return _regeneratorRuntime.awrap(this.adb.getManufacturer());

          case 32:
            this.caps.deviceManufacturer = context$2$0.sent;
            context$2$0.next = 35;
            return _regeneratorRuntime.awrap(this.initEspressoServer());

          case 35:
            context$2$0.next = 37;
            return _regeneratorRuntime.awrap(helpers.initDevice(this.adb, this.opts));

          case 37:
            // Further prepare the device by forwarding the espresso port
            _logger2['default'].debug('Forwarding Espresso Server port ' + DEVICE_PORT + ' to ' + this.opts.systemPort);
            context$2$0.next = 40;
            return _regeneratorRuntime.awrap(this.adb.forwardPort(this.opts.systemPort, DEVICE_PORT));

          case 40:
            if (this.opts.skipUnlock) {
              context$2$0.next = 45;
              break;
            }

            context$2$0.next = 43;
            return _regeneratorRuntime.awrap(helpers.unlock(this, this.adb, this.caps));

          case 43:
            context$2$0.next = 46;
            break;

          case 45:
            _logger2['default'].debug('\'skipUnlock\' capability set, so skipping device unlock');

          case 46:
            if (!this.opts.autoLaunch) {
              context$2$0.next = 49;
              break;
            }

            context$2$0.next = 49;
            return _regeneratorRuntime.awrap(this.initAUT());

          case 49:
            //Adding AUT package name in the capabilities if package name not exist in caps
            if (!this.caps.appPackage) {
              this.caps.appPackage = appInfo.appPackage;
            }
            if (!this.caps.appActivity) {
              this.caps.appActivity = appInfo.appActivity;
            }

            // launch espresso and wait till its online and we have a session
            context$2$0.next = 53;
            return _regeneratorRuntime.awrap(this.espresso.startSession(this.caps));

          case 53:

            // now that everything has started successfully, turn on proxying so all
            // subsequent session requests go straight to/from espresso
            this.jwpProxyActive = true;

          case 54:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'initEspressoServer',
    value: function initEspressoServer() {
      return _regeneratorRuntime.async(function initEspressoServer$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // now that we have package and activity, we can create an instance of
            // espresso with the appropriate data
            this.espresso = new _espressoRunner2['default']({
              host: this.opts.host || 'localhost',
              systemPort: this.opts.systemPort,
              devicePort: DEVICE_PORT,
              adb: this.adb,
              apk: this.opts.app,
              tmpDir: this.opts.tmpDir,
              appPackage: this.opts.appPackage,
              appActivity: this.opts.appActivity,
              forceEspressoRebuild: !!this.opts.forceEspressoRebuild
            });
            this.proxyReqRes = this.espresso.proxyReqRes.bind(this.espresso);

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // TODO this method is mostly duplicated from uiautomator2
  }, {
    key: 'initAUT',
    value: function initAUT() {
      var signed;
      return _regeneratorRuntime.async(function initAUT$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.opts.app) {
              context$2$0.next = 6;
              break;
            }

            if (this.opts.fullReset) {
              _logger2['default'].errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
            }
            _logger2['default'].debug('No app capability. Assuming it is already on the device');

            if (!this.opts.fastReset) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(helpers.resetApp(this.adb, this.opts.app, this.opts.appPackage, this.opts.fastReset));

          case 6:
            if (this.opts.skipUninstall) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

          case 9:
            if (this.opts.noSign) {
              context$2$0.next = 16;
              break;
            }

            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adb.checkApkCert(this.opts.app, this.opts.appPackage));

          case 12:
            signed = context$2$0.sent;

            if (!(!signed && this.opts.app)) {
              context$2$0.next = 16;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.adb.sign(this.opts.app, this.opts.appPackage));

          case 16:
            if (!this.opts.app) {
              context$2$0.next = 19;
              break;
            }

            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(helpers.installApkRemotely(this.adb, this.opts));

          case 19:
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.grantPermissions());

          case 21:
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(this.espresso.installTestApk());

          case 23:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // TODO this method is fully duplicated from uiautomator2
  }, {
    key: 'grantPermissions',
    value: function grantPermissions() {
      return _regeneratorRuntime.async(function grantPermissions$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.opts.autoGrantPermissions) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.adb.grantAllPermissions(this.opts.appPackage, this.opts.app));

          case 4:
            context$2$0.next = 9;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].error('Unable to grant permissions requested. Original error: ' + context$2$0.t0.message);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      var avdName;
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting espresso session');

            if (!this.espresso) {
              context$2$0.next = 6;
              break;
            }

            if (!this.jwpProxyActive) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.espresso.deleteSession());

          case 5:
            this.espresso = null;

          case 6:
            this.jwpProxyActive = false;

            // TODO below logic is duplicated from uiautomator2

            if (!this.adb) {
              context$2$0.next = 26;
              break;
            }

            if (!(this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME)) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug('Resetting IME to \'' + this.defaultIME + '\'');
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adb.setIME(this.defaultIME));

          case 12:
            if (!this.opts.appPackage) {
              context$2$0.next = 15;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.adb.forceStop(this.opts.appPackage));

          case 15:
            if (!(this.opts.fullReset && !this.opts.skipUninstall && !this.appOnDevice)) {
              context$2$0.next = 19;
              break;
            }

            _logger2['default'].debug('FULL_RESET set to \'true\', Uninstalling \'' + this.opts.appPackage + '\'');
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

          case 19:
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.adb.stopLogcat());

          case 21:
            if (!this.opts.reboot) {
              context$2$0.next = 26;
              break;
            }

            avdName = this.opts.avd.replace('@', '');

            _logger2['default'].debug('closing emulator \'' + avdName + '\'');
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.adb.killEmulator(avdName));

          case 26:
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(EspressoDriver.prototype), 'deleteSession', this).call(this));

          case 28:
            if (!(this.opts.systemPort !== undefined)) {
              context$2$0.next = 37;
              break;
            }

            context$2$0.prev = 29;
            context$2$0.next = 32;
            return _regeneratorRuntime.awrap(this.adb.removePortForward(this.opts.systemPort));

          case 32:
            context$2$0.next = 37;
            break;

          case 34:
            context$2$0.prev = 34;
            context$2$0.t0 = context$2$0['catch'](29);

            _logger2['default'].warn('Unable to remove port forward \'' + context$2$0.t0.message + '\'');
            //Ignore, this block will also be called when we fall in catch block
            // and before even port forward.

          case 37:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[29, 34]]);
    }

    // TODO method is duplicated from uiautomator2
  }, {
    key: 'checkAppPresent',
    value: function checkAppPresent() {
      return _regeneratorRuntime.async(function checkAppPresent$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Checking whether app is actually present');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.opts.app));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].errorAndThrow('Could not find app apk at \'' + this.opts.app + '\'');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive(sessionId) {
      _get(Object.getPrototypeOf(EspressoDriver.prototype), 'proxyActive', this).call(this, sessionId);

      // we always have an active proxy to the espresso server
      return true;
    }
  }, {
    key: 'canProxy',
    value: function canProxy(sessionId) {
      _get(Object.getPrototypeOf(EspressoDriver.prototype), 'canProxy', this).call(this, sessionId);

      // we can always proxy to the espresso server
      return true;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList(sessionId) {
      _get(Object.getPrototypeOf(EspressoDriver.prototype), 'getProxyAvoidList', this).call(this, sessionId);
      this.jwpProxyAvoid = NO_PROXY;
      return this.jwpProxyAvoid;
    }
  }, {
    key: 'driverData',
    get: function get() {
      // TODO fille out resource info here
      return {};
    }
  }]);

  return EspressoDriver;
})(_appiumBaseDriver.BaseDriver);

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(_lodash2['default'].toPairs(_appiumAndroidDriver.androidCommands)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var _step$value = _slicedToArray(_step.value, 2);

    var cmd = _step$value[0];
    var fn = _step$value[1];

    // we do some different/special things with these methods
    if (!_lodash2['default'].includes(['defaultWebviewName'], cmd)) {
      EspressoDriver.prototype[cmd] = fn;
    }
  }

  // then overwrite with any espresso-specific commands
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(_commands2['default'])), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var _step2$value = _slicedToArray(_step2.value, 2);

    var cmd = _step2$value[0];
    var fn = _step2$value[1];

    EspressoDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
      _iterator2['return']();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

exports['default'] = EspressoDriver;
module.exports = exports['default'];

// TODO handle otherSessionData for multiple sessions

// find and copy, or download and unzip an app url or path

// get appPackage et al from manifest if necessary

// set up the modified espresso server etc

// start an avd, set the language/locale, pick an emulator, etc...
// TODO with multiple devices we'll need to parameterize this

// unlock the device to prepare it for testing

// If the user sets autoLaunch to false, they are responsible for initAUT() and startAUT()

// set up app under test
// prepare our actual AUT, get it on the device, etc...

// set the localized strings for the current language from the apk
// TODO: incorporate changes from appium#5308 which fix a race cond-
// ition bug in old appium and need to be replicated here
// this.apkStrings[this.opts.language] = await androidHelpers.pushStrings(
//     this.opts.language, this.adb, this.opts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
