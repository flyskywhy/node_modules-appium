'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nodeSimctl = require('node-simctl');

var commands = {};

commands.pushFile = function callee$0$0(remotePath, base64Data) {
  var dstFolder, dstPath;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isSimulator()) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Media upload is only supported on Simulator');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.tempDir());

      case 4:
        dstFolder = context$1$0.sent;
        dstPath = _path2['default'].resolve(dstFolder, _path2['default'].basename(remotePath));
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dstPath, new Buffer(base64Data, 'base64').toString('binary'), 'binary'));

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.addMedia)(this.opts.udid, dstPath));

      case 11:
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(dstFolder));

      case 14:
        return context$1$0.finish(11);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6,, 11, 15]]);
};

exports['default'] = commands;
module.exports = exports['default'];

// It is important to keep the original file name,
// so simctl knows where to put the file
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hY3Rpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7NkJBQTRCLGdCQUFnQjs7b0JBQzNCLE1BQU07Ozs7MEJBQ0UsYUFBYTs7QUFFdEMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDOztBQUVsQixRQUFRLENBQUMsUUFBUSxHQUFHLG9CQUFnQixVQUFVLEVBQUUsVUFBVTtNQUlsRCxTQUFTLEVBR1QsT0FBTzs7OztZQU5SLElBQUksQ0FBQyxXQUFXLEVBQUU7Ozs7O2NBQ2YsSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUM7Ozs7eUNBRXhDLHVCQUFRLE9BQU8sRUFBRTs7O0FBQW5DLGlCQUFTO0FBR1QsZUFBTyxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsa0JBQUssUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7eUNBRTFELGtCQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUM7Ozs7eUNBQ3BGLDBCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQzs7Ozs7eUNBRWpDLGtCQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7Ozs7Ozs7Ozs7Q0FFN0IsQ0FBQzs7cUJBRWEsUUFBUSIsImZpbGUiOiJsaWIvY29tbWFuZHMvYWN0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzLCB0ZW1wRGlyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBhZGRNZWRpYSB9IGZyb20gJ25vZGUtc2ltY3RsJztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLnB1c2hGaWxlID0gYXN5bmMgZnVuY3Rpb24gKHJlbW90ZVBhdGgsIGJhc2U2NERhdGEpIHtcbiAgaWYgKCF0aGlzLmlzU2ltdWxhdG9yKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01lZGlhIHVwbG9hZCBpcyBvbmx5IHN1cHBvcnRlZCBvbiBTaW11bGF0b3InKTtcbiAgfVxuICBjb25zdCBkc3RGb2xkZXIgPSBhd2FpdCB0ZW1wRGlyLnRlbXBEaXIoKTtcbiAgLy8gSXQgaXMgaW1wb3J0YW50IHRvIGtlZXAgdGhlIG9yaWdpbmFsIGZpbGUgbmFtZSxcbiAgLy8gc28gc2ltY3RsIGtub3dzIHdoZXJlIHRvIHB1dCB0aGUgZmlsZVxuICBjb25zdCBkc3RQYXRoID0gcGF0aC5yZXNvbHZlKGRzdEZvbGRlciwgcGF0aC5iYXNlbmFtZShyZW1vdGVQYXRoKSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKGRzdFBhdGgsIG5ldyBCdWZmZXIoYmFzZTY0RGF0YSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKSwgJ2JpbmFyeScpO1xuICAgIGF3YWl0IGFkZE1lZGlhKHRoaXMub3B0cy51ZGlkLCBkc3RQYXRoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCBmcy5yaW1yYWYoZHN0Rm9sZGVyKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
