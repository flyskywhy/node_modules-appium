'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumIosDriver = require('appium-ios-driver');

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var EXTRA_WEB_COORD_SCROLL_OFFSET = -10;
var IPHONE_WEB_COORD_OFFSET = -10;
var IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET = 84;
var IPAD_WEB_COORD_OFFSET = 10;
var IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET = 95;

var extensions = {};

_Object$assign(extensions, _appiumIosDriver.iosCommands.web);

var getSafariIsIphone = _lodash2['default'].memoize(function callee$0$0(sessionId, driver) {
  var isIphone, useragent;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        isIphone = true;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(driver.execute('return navigator.userAgent'));

      case 4:
        useragent = context$1$0.sent;

        isIphone = useragent.toLowerCase().includes('iphone');
        context$1$0.next = 12;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].warn('Unable to find device type from useragent. Assuming iPhone');
        _logger2['default'].debug('Error: ' + context$1$0.t0.message);

      case 12:
        return context$1$0.abrupt('return', isIphone);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 8]]);
});

extensions.getElementHeightMemoized = _lodash2['default'].memoize(function callee$0$0(key, el) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getNativeRect(el));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent.height);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});

extensions.getExtraTranslateWebCoordsOffset = function callee$0$0() {
  var offset, implicitWaitMs, el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        offset = 0;
        implicitWaitMs = this.implicitWaitMs;
        context$1$0.prev = 2;

        this.setImplicitWait(0);

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('accessibility id', 'ReloadButton', false));

      case 6:
        context$1$0.next = 22;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](2);
        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('accessibility id', 'URL', false));

      case 13:
        el = context$1$0.sent;
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getElementHeightMemoized('URLBar', el));

      case 16:
        offset -= context$1$0.sent;
        context$1$0.next = 21;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t1 = context$1$0['catch'](10);

      case 21:
        // no URL elements found, so continue

        // when scrolling has happened, there is a tick more offset needed
        offset += EXTRA_WEB_COORD_SCROLL_OFFSET;

      case 22:
        context$1$0.prev = 22;

        // return implicit wait to what it was
        this.setImplicitWait(implicitWaitMs);
        return context$1$0.finish(22);

      case 25:
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(getSafariIsIphone(this.opts.sessionId, this));

      case 27:
        if (!context$1$0.sent) {
          context$1$0.next = 31;
          break;
        }

        context$1$0.t2 = IPHONE_WEB_COORD_OFFSET;
        context$1$0.next = 32;
        break;

      case 31:
        context$1$0.t2 = IPAD_WEB_COORD_OFFSET;

      case 32:
        offset += context$1$0.t2;

        _logger2['default'].debug('Extra translated web coordinates offset: ' + offset);
        return context$1$0.abrupt('return', offset);

      case 35:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 8, 22, 25], [10, 19]]);
};

extensions.getExtraNativeWebTapOffset = function callee$0$0() {
  var offset, implicitWaitMs, el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        offset = 0;
        implicitWaitMs = this.implicitWaitMs;
        context$1$0.prev = 2;

        this.setImplicitWait(0);

        // first try to get tab offset
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('-ios predicate string', 'name LIKE \'*, Tab\' AND visible = 1', false));

      case 7:
        el = context$1$0.sent;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.getElementHeightMemoized('TabBar', el));

      case 10:
        offset += context$1$0.sent;
        context$1$0.next = 15;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](4);

      case 15:
        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('accessibility id', 'Close app download offer', false));

      case 18:
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(getSafariIsIphone(this));

      case 20:
        if (!context$1$0.sent) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.t1 = IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET;
        context$1$0.next = 25;
        break;

      case 24:
        context$1$0.t1 = IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET;

      case 25:
        offset += context$1$0.t1;
        context$1$0.next = 30;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.t2 = context$1$0['catch'](15);

      case 30:
        context$1$0.prev = 30;

        // return implicit wait to what it was
        this.setImplicitWait(implicitWaitMs);
        return context$1$0.finish(30);

      case 33:

        _logger2['default'].debug('Additional native web tap offset computed: ' + offset);
        return context$1$0.abrupt('return', offset);

      case 35:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2,, 30, 33], [4, 13], [15, 28]]);
};

extensions.nativeWebTap = function callee$0$0(el) {
  var atomsElement, _ref, x, y, _ref2, width, height;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.executeAtom('get_top_left_coordinates', [atomsElement]));

      case 3:
        _ref = context$1$0.sent;
        x = _ref.x;
        y = _ref.y;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.executeAtom('get_size', [atomsElement]));

      case 8:
        _ref2 = context$1$0.sent;
        width = _ref2.width;
        height = _ref2.height;

        x = x + width / 2;
        y = y + height / 2;

        this.curWebCoords = { x: x, y: y };
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.clickWebCoords());

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.clickCoords = function callee$0$0(coords) {
  var x, y;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        x = coords.x;
        y = coords.y;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/tap/nil', 'POST', { x: x, y: y }));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.translateWebCoords = function callee$0$0(coords) {
  var yOffset, webview, rect, wvPos, realDims, cmd, wvDims, urlBarHeight, realDimensionHeight, xRatio, yRatio, newCoords;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Translating coordinates (' + JSON.stringify(coords) + ') to web coordinates');

        // add static offset for safari in landscape mode
        yOffset = this.opts.curOrientation === 'LANDSCAPE' ? this.landscapeWebCoordsOffset : 0;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getExtraNativeWebTapOffset());

      case 4:
        yOffset += context$1$0.sent;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getExtraTranslateWebCoordsOffset());

      case 7:
        coords.y += context$1$0.sent;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(5, 100, function callee$1$0() {
          var implicitWaitMs;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                implicitWaitMs = this.implicitWaitMs;
                context$2$0.prev = 1;

                this.setImplicitWait(0);
                context$2$0.next = 5;
                return _regeneratorRuntime.awrap(this.findNativeElementOrElements('-ios predicate string', 'type = \'XCUIElementTypeWebView\' AND visible = 1', false));

              case 5:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 6:
                context$2$0.prev = 6;

                this.setImplicitWait(implicitWaitMs);
                return context$2$0.finish(6);

              case 9:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[1,, 6, 9]]);
        }));

      case 10:
        webview = context$1$0.sent;

        webview = _appiumSupport.util.unwrapElement(webview);
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + webview + '/rect', 'GET'));

      case 14:
        rect = context$1$0.sent;
        wvPos = { x: rect.x, y: rect.y };
        realDims = { w: rect.width, h: rect.height };
        cmd = '(function () { return {w: document.documentElement.clientWidth, h: document.documentElement.clientHeight}; })()';
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(this.remote.execute(cmd));

      case 20:
        wvDims = context$1$0.sent;
        urlBarHeight = 64;

        wvPos.y += urlBarHeight;

        realDimensionHeight = 108;

        realDims.h -= realDimensionHeight;

        if (!(wvDims && realDims && wvPos)) {
          context$1$0.next = 32;
          break;
        }

        xRatio = realDims.w / wvDims.w;
        yRatio = realDims.h / wvDims.h;
        newCoords = {
          x: wvPos.x + Math.round(xRatio * coords.x),
          y: wvPos.y + yOffset + Math.round(yRatio * coords.y)
        };

        // additional logging in the case where `y` is `null` for unknown reasons
        // see https://github.com/appium/appium/issues/9159
        if (newCoords.y === null) {
          _logger2['default'].debug('Converted coordinates broken: ' + newCoords);
          _logger2['default'].debug('    rect: ' + rect);
          _logger2['default'].debug('    wvPos: ' + wvPos);
          _logger2['default'].debug('    realDims: ' + realDims);
          _logger2['default'].debug('    wvDims: ' + wvDims);
          _logger2['default'].debug('    xRatio: ' + xRatio);
          _logger2['default'].debug('    yRatio: ' + yRatio);
          _logger2['default'].debug('    yOffset: ' + yOffset);
        }

        _logger2['default'].debug('Converted web coords ' + JSON.stringify(coords) + ' ' + ('into real coords ' + JSON.stringify(newCoords)));
        return context$1$0.abrupt('return', newCoords);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.checkForAlert = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', false);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.waitForAtom = function callee$0$0(promise) {
  var res, msg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        res = null;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(promise);

      case 4:
        res = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);
        msg = _lodash2['default'].isString(context$1$0.t0.message) ? context$1$0.t0.message : JSON.stringify(context$1$0.t0.message);
        throw new Error('Error while executing atom: ' + msg);

      case 11:
        return context$1$0.abrupt('return', this.parseExecuteResponse(res));

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

exports['default'] = extensions;
module.exports = exports['default'];

// sessionId parameter is for memoizing per session

// keep track of implicit wait, and set locally to 0

// try to see if there has been scrolling

// reload button found, which means scrolling has not happened

// no reload button, which indicates scrolling has happened

// extra offset necessary (where do these come from? they just work)

// keep track of implicit wait, and set locally to 0

// no element found, so no tabs and no need to deal with offset

// next try to see if there is an Smart App Banner

// no smart app banner found, so continue

// tap on absolute coordinates

// add extra offset for possible extra things in the top of the page

// absolutize web coords

// TODO: investigate where these come from. They appear to be constants in my tests

// TODO: Add check for alert and accept/dismiss it as per autoAcceptAlert capability
//# sourceMappingURL=data:application/json;charset=utf8;base64,
