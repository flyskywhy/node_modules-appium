'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumIosDriver = require('appium-ios-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var extensions = {};

_Object$assign(extensions, _appiumIosDriver.iosCommands.logging);

extensions.startLogCapture = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.logs = this.logs || {};

        if (_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].warn('Trying to start iOS log capture but it has already started!');
        return context$1$0.abrupt('return');

      case 4:
        this.logs.crashlog = new _appiumIosDriver.IOSCrashLog();
        this.logs.syslog = new _appiumIosDriver.IOSLog({
          sim: this.opts.device,
          udid: this.isRealDevice() ? this.opts.udid : undefined,
          showLogs: this.opts.showIOSLog,
          realDeviceLogger: this.opts.realDeviceLogger
        });
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.logs.syslog.startCapture());

      case 9:
        context$1$0.next = 16;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](6);

        _logger2['default'].warn('Could not capture logs from device: ' + context$1$0.t0.message);
        _logger2['default'].debug('Continuing without capturing logs.');
        return context$1$0.abrupt('return');

      case 16:
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.logs.crashlog.startCapture());

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 11]]);
};

exports['default'] = extensions;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7K0JBQzJCLG1CQUFtQjs7c0JBQ3BELFdBQVc7Ozs7QUFHM0IsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDOztBQUVwQixlQUFjLFVBQVUsRUFBRSw2QkFBWSxPQUFPLENBQUMsQ0FBQzs7QUFFL0MsVUFBVSxDQUFDLGVBQWUsR0FBRzs7OztBQUMzQixZQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDOztZQUN2QixvQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7QUFDdkIsNEJBQUksSUFBSSxDQUFDLDZEQUE2RCxDQUFDLENBQUM7Ozs7QUFHMUUsWUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsa0NBQWlCLENBQUM7QUFDdkMsWUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsNEJBQVc7QUFDNUIsYUFBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUNyQixjQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVM7QUFDdEQsa0JBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7QUFDOUIsMEJBQWdCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0I7U0FDN0MsQ0FBQyxDQUFDOzs7eUNBRUssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFOzs7Ozs7Ozs7O0FBRXJDLDRCQUFJLElBQUksMENBQXdDLGVBQUksT0FBTyxDQUFHLENBQUM7QUFDL0QsNEJBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7Ozs7O3lDQUc1QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUU7Ozs7Ozs7Q0FDeEMsQ0FBQzs7cUJBRWEsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IElPU0xvZywgSU9TQ3Jhc2hMb2csIGlvc0NvbW1hbmRzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5cbmxldCBleHRlbnNpb25zID0ge307XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgaW9zQ29tbWFuZHMubG9nZ2luZyk7XG5cbmV4dGVuc2lvbnMuc3RhcnRMb2dDYXB0dXJlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICB0aGlzLmxvZ3MgPSB0aGlzLmxvZ3MgfHwge307XG4gIGlmICghXy5pc0VtcHR5KHRoaXMubG9ncykpIHtcbiAgICBsb2cud2FybignVHJ5aW5nIHRvIHN0YXJ0IGlPUyBsb2cgY2FwdHVyZSBidXQgaXQgaGFzIGFscmVhZHkgc3RhcnRlZCEnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sb2dzLmNyYXNobG9nID0gbmV3IElPU0NyYXNoTG9nKCk7XG4gIHRoaXMubG9ncy5zeXNsb2cgPSBuZXcgSU9TTG9nKHtcbiAgICBzaW06IHRoaXMub3B0cy5kZXZpY2UsXG4gICAgdWRpZDogdGhpcy5pc1JlYWxEZXZpY2UoKSA/IHRoaXMub3B0cy51ZGlkIDogdW5kZWZpbmVkLFxuICAgIHNob3dMb2dzOiB0aGlzLm9wdHMuc2hvd0lPU0xvZyxcbiAgICByZWFsRGV2aWNlTG9nZ2VyOiB0aGlzLm9wdHMucmVhbERldmljZUxvZ2dlcixcbiAgfSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5sb2dzLnN5c2xvZy5zdGFydENhcHR1cmUoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYENvdWxkIG5vdCBjYXB0dXJlIGxvZ3MgZnJvbSBkZXZpY2U6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgbG9nLmRlYnVnKCdDb250aW51aW5nIHdpdGhvdXQgY2FwdHVyaW5nIGxvZ3MuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGF3YWl0IHRoaXMubG9ncy5jcmFzaGxvZy5zdGFydENhcHR1cmUoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
