'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _asyncbox = require('asyncbox');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodeSimctl = require('node-simctl');

var _teen_process = require('teen_process');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var commands = {};

function getScreenshotWithIdevicelib(udid) {
  var pathToScreenshotTiff, pathToResultPng;
  return _regeneratorRuntime.async(function getScreenshotWithIdevicelib$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'screenshot-' + udid, suffix: '.tiff' }));

      case 2:
        pathToScreenshotTiff = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToScreenshotTiff));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'screenshot-' + udid, suffix: '.png' }));

      case 7:
        pathToResultPng = context$1$0.sent;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToResultPng));

      case 10:
        context$1$0.prev = 10;
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('idevicescreenshot', ['-u', udid, pathToScreenshotTiff]));

      case 14:
        context$1$0.next = 20;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](11);

        _logger2['default'].warn('Cannot take a screenshot from the device ' + udid + ' using idevicescreenshot. Original error: ' + context$1$0.t0.message);
        return context$1$0.abrupt('return');

      case 20:
        context$1$0.prev = 20;
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('sips', ['-s', 'format', 'png', pathToScreenshotTiff, '--out', pathToResultPng]));

      case 23:
        context$1$0.next = 29;
        break;

      case 25:
        context$1$0.prev = 25;
        context$1$0.t1 = context$1$0['catch'](20);

        _logger2['default'].warn('Cannot convert a screenshot from TIFF to PNG using sips tool. Original error: ' + context$1$0.t1.message);
        return context$1$0.abrupt('return');

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(pathToResultPng));

      case 31:
        if (context$1$0.sent) {
          context$1$0.next = 34;
          break;
        }

        _logger2['default'].warn('Cannot convert a screenshot from TIFF to PNG. The conversion result does not exist at ' + pathToResultPng);
        return context$1$0.abrupt('return');

      case 34:
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(pathToResultPng));

      case 36:
        return context$1$0.abrupt('return', context$1$0.sent.toString('base64'));

      case 37:
        context$1$0.prev = 37;
        context$1$0.next = 40;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToScreenshotTiff));

      case 40:
        context$1$0.next = 42;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToResultPng));

      case 42:
        return context$1$0.finish(37);

      case 43:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10,, 37, 43], [11, 16], [20, 25]]);
}

commands.getScreenshot = function callee$0$0() {
  var getScreenshotFromWDA, data, result;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        getScreenshotFromWDA = function getScreenshotFromWDA() {
          var data;
          return _regeneratorRuntime.async(function getScreenshotFromWDA$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.proxyCommand('/screenshot', 'GET'));

              case 2:
                data = context$2$0.sent;

                if (_lodash2['default'].isString(data)) {
                  context$2$0.next = 5;
                  break;
                }

                throw new Error('Unable to take screenshot. WDA returned \'' + JSON.stringify(data) + '\'');

              case 5:
                return context$2$0.abrupt('return', data);

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(getScreenshotFromWDA());

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        if (!(!this.isRealDevice() && this.xcodeVersion.versionFloat >= 8.1)) {
          context$1$0.next = 14;
          break;
        }

        _logger2['default'].info('Falling back to \'simctl io screenshot\' API');
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.getScreenshot)(this.opts.udid));

      case 13:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
        context$1$0.t1 = this.isRealDevice();

        if (!context$1$0.t1) {
          context$1$0.next = 19;
          break;
        }

        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('idevicescreenshot'));

      case 18:
        context$1$0.t1 = context$1$0.sent;

      case 19:
        if (!context$1$0.t1) {
          context$1$0.next = 26;
          break;
        }

        _logger2['default'].info('Falling back to \'idevicescreenshot\' API');
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(getScreenshotWithIdevicelib(this.opts.udid));

      case 23:
        data = context$1$0.sent;

        if (!data) {
          context$1$0.next = 26;
          break;
        }

        return context$1$0.abrupt('return', data);

      case 26:
        result = undefined;
        context$1$0.next = 29;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(5, 1000, function callee$2$0() {
          return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
            while (1) switch (context$3$0.prev = context$3$0.next) {
              case 0:
                context$3$0.next = 2;
                return _regeneratorRuntime.awrap(getScreenshotFromWDA());

              case 2:
                result = context$3$0.sent;

              case 3:
              case 'end':
                return context$3$0.stop();
            }
          }, null, _this);
        }));

      case 29:
        return context$1$0.abrupt('return', result);

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

exports['default'] = commands;
module.exports = exports['default'];

// The sips tool is only present on Mac OS

// Retry for real devices only. Fail fast on Simulator if simctl does not work as expected
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3dCQUE4QixVQUFVOztzQkFDMUIsUUFBUTs7OzswQkFDUSxhQUFhOzs0QkFDdEIsY0FBYzs7c0JBQ25CLFdBQVc7Ozs7NkJBQ0MsZ0JBQWdCOztBQUU1QyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLFNBQWUsMkJBQTJCLENBQUUsSUFBSTtNQUN4QyxvQkFBb0IsRUFFcEIsZUFBZTs7Ozs7eUNBRmMsdUJBQVEsSUFBSSxDQUFDLEVBQUMsTUFBTSxrQkFBZ0IsSUFBSSxBQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBQyxDQUFDOzs7QUFBMUYsNEJBQW9COzt5Q0FDcEIsa0JBQUcsTUFBTSxDQUFDLG9CQUFvQixDQUFDOzs7O3lDQUNQLHVCQUFRLElBQUksQ0FBQyxFQUFDLE1BQU0sa0JBQWdCLElBQUksQUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQzs7O0FBQXBGLHVCQUFlOzt5Q0FDZixrQkFBRyxNQUFNLENBQUMsZUFBZSxDQUFDOzs7Ozs7eUNBR3RCLHdCQUFLLG1CQUFtQixFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDOzs7Ozs7Ozs7O0FBRW5FLDRCQUFJLElBQUksK0NBQTZDLElBQUksa0RBQTZDLGVBQUUsT0FBTyxDQUFHLENBQUM7Ozs7Ozt5Q0FLN0csd0JBQUssTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFDOzs7Ozs7Ozs7O0FBRTNGLDRCQUFJLElBQUksb0ZBQWtGLGVBQUUsT0FBTyxDQUFHLENBQUM7Ozs7O3lDQUc5RixrQkFBRyxNQUFNLENBQUMsZUFBZSxDQUFDOzs7Ozs7OztBQUNuQyw0QkFBSSxJQUFJLDRGQUEwRixlQUFlLENBQUcsQ0FBQzs7Ozs7eUNBR3pHLGtCQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7Ozs2REFBRSxRQUFRLENBQUMsUUFBUTs7Ozs7eUNBRXZELGtCQUFHLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQzs7Ozt5Q0FDL0Isa0JBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQzs7Ozs7Ozs7OztDQUVuQzs7QUFFRCxRQUFRLENBQUMsYUFBYSxHQUFHO01BQ2pCLG9CQUFvQixFQWdCaEIsSUFBSSxFQU1SLE1BQU07Ozs7OztBQXRCTiw0QkFBb0IsR0FBRyxTQUF2QixvQkFBb0I7Y0FDbEIsSUFBSTs7Ozs7aURBQVMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDOzs7QUFBcEQsb0JBQUk7O29CQUNMLG9CQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUM7Ozs7O3NCQUNiLElBQUksS0FBSyxnREFBNkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBSTs7O29EQUUvRSxJQUFJOzs7Ozs7O1NBQ1o7Ozs7eUNBRWMsb0JBQW9CLEVBQUU7Ozs7Ozs7OztjQUUvQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUE7Ozs7O0FBQy9ELDRCQUFJLElBQUksZ0RBQThDLENBQUM7O3lDQUMxQywrQkFBYyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7O3lCQUV4QyxJQUFJLENBQUMsWUFBWSxFQUFFOzs7Ozs7Ozt5Q0FBVSxrQkFBRyxLQUFLLENBQUMsbUJBQW1CLENBQUM7Ozs7Ozs7Ozs7O0FBQzVELDRCQUFJLElBQUksNkNBQTJDLENBQUM7O3lDQUNqQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7O0FBQXhELFlBQUk7O2FBQ04sSUFBSTs7Ozs7NENBQ0MsSUFBSTs7O0FBSVgsY0FBTTs7eUNBQ0osNkJBQWMsQ0FBQyxFQUFFLElBQUksRUFBRTs7Ozs7aURBQ1osb0JBQW9CLEVBQUU7OztBQUFyQyxzQkFBTTs7Ozs7OztTQUNQLENBQUM7Ozs0Q0FDSyxNQUFNOzs7Ozs7O0NBRWhCLENBQUM7O3FCQUVhLFFBQVEiLCJmaWxlIjoibGliL2NvbW1hbmRzL3NjcmVlbnNob3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBnZXRTY3JlZW5zaG90IH0gZnJvbSAnbm9kZS1zaW1jdGwnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBmcywgdGVtcERpciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNjcmVlbnNob3RXaXRoSWRldmljZWxpYiAodWRpZCkge1xuICBjb25zdCBwYXRoVG9TY3JlZW5zaG90VGlmZiA9IGF3YWl0IHRlbXBEaXIucGF0aCh7cHJlZml4OiBgc2NyZWVuc2hvdC0ke3VkaWR9YCwgc3VmZml4OiAnLnRpZmYnfSk7XG4gIGF3YWl0IGZzLnJpbXJhZihwYXRoVG9TY3JlZW5zaG90VGlmZik7XG4gIGNvbnN0IHBhdGhUb1Jlc3VsdFBuZyA9IGF3YWl0IHRlbXBEaXIucGF0aCh7cHJlZml4OiBgc2NyZWVuc2hvdC0ke3VkaWR9YCwgc3VmZml4OiAnLnBuZyd9KTtcbiAgYXdhaXQgZnMucmltcmFmKHBhdGhUb1Jlc3VsdFBuZyk7XG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGV4ZWMoJ2lkZXZpY2VzY3JlZW5zaG90JywgWyctdScsIHVkaWQsIHBhdGhUb1NjcmVlbnNob3RUaWZmXSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nLndhcm4oYENhbm5vdCB0YWtlIGEgc2NyZWVuc2hvdCBmcm9tIHRoZSBkZXZpY2UgJHt1ZGlkfSB1c2luZyBpZGV2aWNlc2NyZWVuc2hvdC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gVGhlIHNpcHMgdG9vbCBpcyBvbmx5IHByZXNlbnQgb24gTWFjIE9TXG4gICAgICBhd2FpdCBleGVjKCdzaXBzJywgWyctcycsICdmb3JtYXQnLCAncG5nJywgcGF0aFRvU2NyZWVuc2hvdFRpZmYsICctLW91dCcsIHBhdGhUb1Jlc3VsdFBuZ10pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZy53YXJuKGBDYW5ub3QgY29udmVydCBhIHNjcmVlbnNob3QgZnJvbSBUSUZGIHRvIFBORyB1c2luZyBzaXBzIHRvb2wuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFhd2FpdCBmcy5leGlzdHMocGF0aFRvUmVzdWx0UG5nKSkge1xuICAgICAgbG9nLndhcm4oYENhbm5vdCBjb252ZXJ0IGEgc2NyZWVuc2hvdCBmcm9tIFRJRkYgdG8gUE5HLiBUaGUgY29udmVyc2lvbiByZXN1bHQgZG9lcyBub3QgZXhpc3QgYXQgJHtwYXRoVG9SZXN1bHRQbmd9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiAoYXdhaXQgZnMucmVhZEZpbGUocGF0aFRvUmVzdWx0UG5nKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IGZzLnJpbXJhZihwYXRoVG9TY3JlZW5zaG90VGlmZik7XG4gICAgYXdhaXQgZnMucmltcmFmKHBhdGhUb1Jlc3VsdFBuZyk7XG4gIH1cbn1cblxuY29tbWFuZHMuZ2V0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgZ2V0U2NyZWVuc2hvdEZyb21XREEgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvc2NyZWVuc2hvdCcsICdHRVQnKTtcbiAgICBpZiAoIV8uaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHRha2Ugc2NyZWVuc2hvdC4gV0RBIHJldHVybmVkICcke0pTT04uc3RyaW5naWZ5KGRhdGEpfSdgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGdldFNjcmVlbnNob3RGcm9tV0RBKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICghdGhpcy5pc1JlYWxEZXZpY2UoKSAmJiB0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uRmxvYXQgPj0gOC4xKSB7XG4gICAgICBsb2cuaW5mbyhgRmFsbGluZyBiYWNrIHRvICdzaW1jdGwgaW8gc2NyZWVuc2hvdCcgQVBJYCk7XG4gICAgICByZXR1cm4gYXdhaXQgZ2V0U2NyZWVuc2hvdCh0aGlzLm9wdHMudWRpZCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzUmVhbERldmljZSgpICYmIGF3YWl0IGZzLndoaWNoKCdpZGV2aWNlc2NyZWVuc2hvdCcpKSB7XG4gICAgICBsb2cuaW5mbyhgRmFsbGluZyBiYWNrIHRvICdpZGV2aWNlc2NyZWVuc2hvdCcgQVBJYCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0U2NyZWVuc2hvdFdpdGhJZGV2aWNlbGliKHRoaXMub3B0cy51ZGlkKTtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZXRyeSBmb3IgcmVhbCBkZXZpY2VzIG9ubHkuIEZhaWwgZmFzdCBvbiBTaW11bGF0b3IgaWYgc2ltY3RsIGRvZXMgbm90IHdvcmsgYXMgZXhwZWN0ZWRcbiAgICBsZXQgcmVzdWx0O1xuICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwoNSwgMTAwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgZ2V0U2NyZWVuc2hvdEZyb21XREEoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
