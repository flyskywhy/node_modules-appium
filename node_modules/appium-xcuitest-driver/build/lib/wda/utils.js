'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _asyncLock = require('async-lock');

var _asyncLock2 = _interopRequireDefault(_asyncLock);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var WDA_RUNNER_BUNDLE_ID = 'com.facebook.WebDriverAgentRunner';
var PROJECT_FILE = 'project.pbxproj';
var XCUICOORDINATE_FILE = 'PrivateHeaders/XCTest/XCUICoordinate.h';
var FBMACROS_FILE = 'WebDriverAgentLib/Utilities/FBMacros.h';
var XCUIAPPLICATION_FILE = 'PrivateHeaders/XCTest/XCUIApplication.h';

function replaceInFile(file, find, replace) {
  var contents, newContents;
  return _regeneratorRuntime.async(function replaceInFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(file, 'utf-8'));

      case 2:
        contents = context$1$0.sent;
        newContents = contents.replace(find, replace);

        if (!(newContents !== contents)) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(file, newContents, 'utf-8'));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function updateProjectFile(agentPath, newBundleId) {
  var projectFilePath;
  return _regeneratorRuntime.async(function updateProjectFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        projectFilePath = agentPath + '/' + PROJECT_FILE;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(projectFilePath, projectFilePath + '.old'));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(replaceInFile(projectFilePath, new RegExp(WDA_RUNNER_BUNDLE_ID.replace('.', '\.'), 'g'), newBundleId));

      case 6:
        _logger2['default'].debug('Successfully updated \'' + projectFilePath + '\' with bundle id \'' + newBundleId + '\'');
        context$1$0.next = 13;
        break;

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug('Error updating project file: ' + context$1$0.t0.message);
        _logger2['default'].warn('Unable to update project file \'' + projectFilePath + '\' with ' + ('bundle id \'' + newBundleId + '\'. WebDriverAgent may not start'));

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 9]]);
}

function resetProjectFile(agentPath, newBundleId) {
  var projectFilePath;
  return _regeneratorRuntime.async(function resetProjectFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        projectFilePath = agentPath + '/' + PROJECT_FILE;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(replaceInFile(projectFilePath, new RegExp(newBundleId.replace('.', '\.'), 'g'), WDA_RUNNER_BUNDLE_ID));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(projectFilePath + '.old'));

      case 6:
        _logger2['default'].debug('Successfully reset \'' + projectFilePath + '\' with bundle id \'' + WDA_RUNNER_BUNDLE_ID + '\'');
        context$1$0.next = 13;
        break;

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug('Error resetting project file: ' + context$1$0.t0.message);
        _logger2['default'].warn('Unable to reset project file \'' + projectFilePath + '\' with ' + ('bundle id \'' + WDA_RUNNER_BUNDLE_ID + '\'. WebDriverAgent has been ') + 'modified and not returned to the original state.');

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 9]]);
}

var dependenciesUpdateLock = new _asyncLock2['default']();

function checkForDependencies(bootstrapPath) {
  var useSsl = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  var carthagePath, carthageRoot;
  return _regeneratorRuntime.async(function checkForDependencies$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('carthage'));

      case 3:
        carthagePath = context$1$0.sent;

        _logger2['default'].debug('Carthage found: \'' + carthagePath + '\'');
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].errorAndThrow('Carthage not found. Install using `brew install carthage`');

      case 10:
        carthageRoot = bootstrapPath + '/Carthage';
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(dependenciesUpdateLock.acquire(carthageRoot, function callee$1$0() {
          var args, _arr, _i, std, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(carthageRoot));

              case 2:
                if (context$2$0.sent) {
                  context$2$0.next = 49;
                  break;
                }

                _logger2['default'].debug('Running WebDriverAgent bootstrap script to install dependencies');
                context$2$0.prev = 4;
                args = useSsl ? ['-d', '-D'] : ['-d'];
                context$2$0.next = 8;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)('Scripts/bootstrap.sh', args, { cwd: bootstrapPath }));

              case 8:
                context$2$0.next = 49;
                break;

              case 10:
                context$2$0.prev = 10;
                context$2$0.t0 = context$2$0['catch'](4);
                _arr = ['stdout', 'stderr'];
                _i = 0;

              case 14:
                if (!(_i < _arr.length)) {
                  context$2$0.next = 46;
                  break;
                }

                std = _arr[_i];
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                context$2$0.prev = 19;
                _iterator = _getIterator((context$2$0.t0[std] || '').split('\n'));

              case 21:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  context$2$0.next = 29;
                  break;
                }

                line = _step.value;

                if (line.length) {
                  context$2$0.next = 25;
                  break;
                }

                return context$2$0.abrupt('continue', 26);

              case 25:
                _logger2['default'].error(line);

              case 26:
                _iteratorNormalCompletion = true;
                context$2$0.next = 21;
                break;

              case 29:
                context$2$0.next = 35;
                break;

              case 31:
                context$2$0.prev = 31;
                context$2$0.t1 = context$2$0['catch'](19);
                _didIteratorError = true;
                _iteratorError = context$2$0.t1;

              case 35:
                context$2$0.prev = 35;
                context$2$0.prev = 36;

                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }

              case 38:
                context$2$0.prev = 38;

                if (!_didIteratorError) {
                  context$2$0.next = 41;
                  break;
                }

                throw _iteratorError;

              case 41:
                return context$2$0.finish(38);

              case 42:
                return context$2$0.finish(35);

              case 43:
                _i++;
                context$2$0.next = 14;
                break;

              case 46:
                context$2$0.next = 48;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(carthageRoot));

              case 48:
                throw context$2$0.t0;

              case 49:
                context$2$0.next = 51;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(bootstrapPath + '/Resources'));

              case 51:
                if (context$2$0.sent) {
                  context$2$0.next = 55;
                  break;
                }

                _logger2['default'].debug('Creating WebDriverAgent resources directory');
                context$2$0.next = 55;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(bootstrapPath + '/Resources'));

              case 55:
                context$2$0.next = 57;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(bootstrapPath + '/Resources/WebDriverAgent.bundle'));

              case 57:
                if (context$2$0.sent) {
                  context$2$0.next = 61;
                  break;
                }

                _logger2['default'].debug('Creating WebDriverAgent resource bundle directory');
                context$2$0.next = 61;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(bootstrapPath + '/Resources/WebDriverAgent.bundle'));

              case 61:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[4, 10], [19, 31, 35, 43], [36,, 38, 42]]);
        }));

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 7]]);
}

function setRealDeviceSecurity(keychainPath, keychainPassword) {
  return _regeneratorRuntime.async(function setRealDeviceSecurity$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Setting security for iOS device');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('security', ['-v', 'list-keychains', '-s', keychainPath]));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('security', ['-v', 'unlock-keychain', '-p', keychainPassword, keychainPath]));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('security', ['set-keychain-settings', '-t', '3600', '-l', keychainPath]));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function fixXCUICoordinateFile(bootstrapPath) {
  var initial = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

  var file, oldDef, newDef, _ref;

  return _regeneratorRuntime.async(function fixXCUICoordinateFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        file = _path2['default'].resolve(bootstrapPath, XCUICOORDINATE_FILE);
        oldDef = '- (void)pressForDuration:(double)arg1 thenDragToCoordinate:(id)arg2;';
        newDef = '- (void)pressForDuration:(NSTimeInterval)duration thenDragToCoordinate:(XCUICoordinate *)otherCoordinate;';

        if (!initial) {
          _ref = [newDef, oldDef];
          oldDef = _ref[0];
          newDef = _ref[1];
        }
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(replaceInFile(file, oldDef, newDef));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function fixForXcode7(bootstrapPath) {
  var initial = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  return _regeneratorRuntime.async(function fixForXcode7$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(fixXCUICoordinateFile(bootstrapPath, initial));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function fixFBMacrosFile(bootstrapPath) {
  var initial = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

  var file, oldDef, newDef, _ref2;

  return _regeneratorRuntime.async(function fixFBMacrosFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        file = _path2['default'].resolve(bootstrapPath, FBMACROS_FILE);
        oldDef = '#define FBStringify(class, property) ({if(NO){[class.new property];} @#property;})';
        newDef = '#define FBStringify(class, property) ({@#property;})';

        if (!initial) {
          _ref2 = [newDef, oldDef];
          oldDef = _ref2[0];
          newDef = _ref2[1];
        }
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(replaceInFile(file, oldDef, newDef));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function fixXCUIApplicationFile(bootstrapPath) {
  var initial = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

  var file, oldDef, newDef, _ref3;

  return _regeneratorRuntime.async(function fixXCUIApplicationFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        file = _path2['default'].resolve(bootstrapPath, XCUIAPPLICATION_FILE);
        oldDef = '@property(nonatomic, readonly) NSUInteger state; // @synthesize state=_state;';
        newDef = '@property XCUIApplicationState state;';

        if (!initial) {
          _ref3 = [newDef, oldDef];
          oldDef = _ref3[0];
          newDef = _ref3[1];
        }
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(replaceInFile(file, oldDef, newDef));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function fixForXcode9(bootstrapPath) {
  var initial = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  return _regeneratorRuntime.async(function fixForXcode9$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(fixFBMacrosFile(bootstrapPath, initial));

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(fixXCUIApplicationFile(bootstrapPath, initial));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function generateXcodeConfigFile(orgId, signingId) {
  var contents, xcconfigPath;
  return _regeneratorRuntime.async(function generateXcodeConfigFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Generating xcode config file for orgId \'' + orgId + '\' and signingId ' + ('\'' + signingId + '\''));
        contents = 'DEVELOPMENT_TEAM = ' + orgId + '\nCODE_SIGN_IDENTITY = ' + signingId + '\n';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path('appium-temp.xcconfig'));

      case 4:
        xcconfigPath = context$1$0.sent;

        _logger2['default'].debug('Writing xcode config file to ' + xcconfigPath);
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(xcconfigPath, contents, "utf8"));

      case 8:
        return context$1$0.abrupt('return', xcconfigPath);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Creates xctestrun file per device & platform version.
 * We expects to have WebDriverAgentRunner_iphoneos${platformVersion}-arm64.xctestrun for real device
 * and WebDriverAgentRunner_iphonesimulator${platformVersion}-x86_64.xctestrun for simulator located @bootstrapPath
 *
 * @param {boolean} isRealDevice - Equals to true if the current device is a real device
 * @param {string} udid - The device UDID.
 * @param {string} platformVersion - The platform version of OS.
 * @param {string} bootstrapPath - The folder path containing xctestrun file.
 * @param {string} wdaRemotePort - The remote port WDA is listening on.
 * @return {string} returns xctestrunFilePath for given device
 * @throws if WebDriverAgentRunner_iphoneos${platformVersion}-arm64.xctestrun for real device
 * or WebDriverAgentRunner_iphonesimulator${platformVersion}-x86_64.xctestrun for simulator is not found @bootstrapPath,
 * then it will throw file not found exception
 */
function setXctestrunFile(isRealDevice, udid, platformVersion, bootstrapPath, wdaRemotePort) {
  var xctestrunDeviceFileName, xctestrunFilePath, xctestBaseFileName, originalXctestrunFile, xctestRunContent, updateWDAPort, newXctestRunContent;
  return _regeneratorRuntime.async(function setXctestrunFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        xctestrunDeviceFileName = udid + '_' + platformVersion + '.xctestrun';
        xctestrunFilePath = _path2['default'].resolve(bootstrapPath, xctestrunDeviceFileName);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(xctestrunFilePath));

      case 4:
        if (context$1$0.sent) {
          context$1$0.next = 13;
          break;
        }

        xctestBaseFileName = isRealDevice ? 'WebDriverAgentRunner_iphoneos' + platformVersion + '-arm64.xctestrun' : 'WebDriverAgentRunner_iphonesimulator' + platformVersion + '-x86_64.xctestrun';
        originalXctestrunFile = _path2['default'].resolve(bootstrapPath, xctestBaseFileName);
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(originalXctestrunFile));

      case 9:
        if (context$1$0.sent) {
          context$1$0.next = 11;
          break;
        }

        _logger2['default'].errorAndThrow('if you are using useXctestrunFile capability then you need to have ' + originalXctestrunFile + ' file');

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(originalXctestrunFile, xctestrunFilePath));

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(_appiumSupport.plist.parsePlistFile(xctestrunFilePath));

      case 15:
        xctestRunContent = context$1$0.sent;
        updateWDAPort = {
          WebDriverAgentRunner: {
            EnvironmentVariables: {
              USE_PORT: wdaRemotePort
            }
          }
        };
        newXctestRunContent = _lodash2['default'].merge(xctestRunContent, updateWDAPort);
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_appiumSupport.plist.updatePlistFile(xctestrunFilePath, newXctestRunContent, true));

      case 20:
        return context$1$0.abrupt('return', xctestrunFilePath);

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function killProcess(name, proc) {
  return _regeneratorRuntime.async(function killProcess$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(proc && proc.proc)) {
          context$1$0.next = 22;
          break;
        }

        _logger2['default'].info('Shutting down ' + name + ' process (pid ' + proc.proc.pid + ')');
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(proc.stop('SIGTERM', 1000));

      case 5:
        context$1$0.next = 22;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](2);

        if (!(context$1$0.t0.message.indexOf('Process didn\'t end after') === -1)) {
          context$1$0.next = 11;
          break;
        }

        throw context$1$0.t0;

      case 11:
        _logger2['default'].debug(name + ' process did not end in a timely fashion: \'' + context$1$0.t0.message + '\'. ' + 'Sending \'SIGKILL\'...');
        context$1$0.prev = 12;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(proc.stop('SIGKILL'));

      case 15:
        context$1$0.next = 22;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t1 = context$1$0['catch'](12);

        if (!(context$1$0.t1.message.indexOf('not currently running') !== -1)) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('return');

      case 21:
        throw context$1$0.t1;

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 7], [12, 17]]);
}

/**
 * Generate a random integer.
 *
 * @return {number} A random integer number in range [low, hight). `low`` is inclusive and `high` is exclusive.
 */
function randomInt(low, high) {
  return Math.floor(Math.random() * (high - low) + low);
}

exports.updateProjectFile = updateProjectFile;
exports.resetProjectFile = resetProjectFile;
exports.checkForDependencies = checkForDependencies;
exports.setRealDeviceSecurity = setRealDeviceSecurity;
exports.fixForXcode7 = fixForXcode7;
exports.fixForXcode9 = fixForXcode9;
exports.generateXcodeConfigFile = generateXcodeConfigFile;
exports.setXctestrunFile = setXctestrunFile;
exports.killProcess = killProcess;
exports.randomInt = randomInt;

// backup the file, and then update the bundle id for the runner

// print out the stdout and stderr reports

// remove the carthage directory, or else subsequent runs will see it and
// assume the dependencies are already downloaded

// the way the updated XCTest headers are in the WDA project, building in
// Xcode 8.0 causes a duplicate declaration of method
// so fix the offending line in the local headers

// If this is first time run for given device, then first generate xctestrun file for device.
// We need to have a xctestrun file per device because we cant not have same wda port for all devices.

// the process ended but for some reason we were not informed
//# sourceMappingURL=data:application/json;charset=utf8;base64,
