'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deviceLogIosLog = require('../device-log/ios-log');

var _deviceLogIosLog2 = _interopRequireDefault(_deviceLogIosLog);

var _deviceLogIosCrashLog = require('../device-log/ios-crash-log');

var _deviceLogIosCrashLog2 = _interopRequireDefault(_deviceLogIosCrashLog);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

var SUPPORTED_LOG_TYPES = {
  'syslog': 'System Logs - Device logs for iOS applications on real devices and simulators',
  'crashlog': 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
  'performance': 'Performance Logs - Debug Timelines on real devices and simulators'
};

commands.getLogTypes = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving supported log types');
        return context$1$0.abrupt('return', _lodash2['default'].keys(SUPPORTED_LOG_TYPES));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getLog = function callee$0$0(logType) {
  var logObject, logs;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving \'' + logType + '\' logs');
        // Check if passed logType is supported

        if (_lodash2['default'].has(SUPPORTED_LOG_TYPES, logType)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('Unsupported log type \'' + logType + '\' for this device. Supported types : ' + JSON.stringify(SUPPORTED_LOG_TYPES));

      case 3:
        if (!_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('No logs currently available. Is the device/simulator started?');

      case 5:
        logObject = this.logs[logType];

        if (!logObject) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(logObject.getLogs());

      case 9:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 13;
        break;

      case 12:
        context$1$0.t0 = null;

      case 13:
        logs = context$1$0.t0;

        if (!logs) {
          context$1$0.next = 18;
          break;
        }

        return context$1$0.abrupt('return', logs);

      case 18:
        throw new Error('No logs of type \'' + logType + '\' found.');

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.startLogCapture = function callee$0$0(sim) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].warn("Trying to start iOS log capture but it's already started!");
        return context$1$0.abrupt('return');

      case 3:
        this.logs.crashlog = new _deviceLogIosCrashLog2['default']();
        this.logs.syslog = new _deviceLogIosLog2['default']({
          sim: sim,
          udid: this.opts.udid,
          showLogs: this.opts.showIOSLog,
          realDeviceLogger: this.opts.realDeviceLogger
        });
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.logs.syslog.startCapture());

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        _logger2['default'].warn("Could not capture logs from device. Continuing without capturing logs.");
        return context$1$0.abrupt('return');

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.logs.crashlog.startCapture());

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports.SUPPORTED_LOG_TYPES = SUPPORTED_LOG_TYPES;
exports['default'] = extensions;

// make sure that we have logs at all
// otherwise it's not been initialized

// If logs captured successfully send response with data, else send error
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7OytCQUNILHVCQUF1Qjs7OztvQ0FDbEIsNkJBQTZCOzs7O3NCQUNsQyxXQUFXOzs7O0FBRzlCLElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELElBQU0sbUJBQW1CLEdBQUc7QUFDMUIsVUFBUSxFQUFFLCtFQUErRTtBQUN6RixZQUFVLEVBQUUsZ0ZBQWdGO0FBQzVGLGVBQWEsRUFBRSxtRUFBbUU7Q0FDbkYsQ0FBQzs7QUFFRixRQUFRLENBQUMsV0FBVyxHQUFHOzs7O0FBQ3JCLDRCQUFPLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDOzRDQUN4QyxvQkFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUM7Ozs7Ozs7Q0FDbkMsQ0FBQzs7QUFFRixRQUFRLENBQUMsTUFBTSxHQUFHLG9CQUFnQixPQUFPO01BY25DLFNBQVMsRUFDVCxJQUFJOzs7O0FBZFIsNEJBQU8sS0FBSyxtQkFBZ0IsT0FBTyxhQUFTLENBQUM7OztZQUV4QyxvQkFBRSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDOzs7OztjQUNoQyxJQUFJLEtBQUssNkJBQTBCLE9BQU8sOENBQXdDLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBRzs7O2FBSzVILG9CQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7OztjQUNoQixJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQzs7O0FBSTlFLGlCQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7O2FBQ3ZCLFNBQVM7Ozs7Ozt5Q0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFOzs7Ozs7Ozt5QkFBRyxJQUFJOzs7QUFBbkQsWUFBSTs7YUFDSixJQUFJOzs7Ozs0Q0FDQyxJQUFJOzs7Y0FFTCxJQUFJLEtBQUssd0JBQXFCLE9BQU8sZUFBVzs7Ozs7OztDQUV6RCxDQUFDOztBQUVGLE9BQU8sQ0FBQyxlQUFlLEdBQUcsb0JBQWdCLEdBQUc7Ozs7WUFDdEMsb0JBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7O0FBQ3ZCLDRCQUFPLElBQUksQ0FBQywyREFBMkQsQ0FBQyxDQUFDOzs7O0FBRzNFLFlBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLHVDQUFpQixDQUFDO0FBQ3ZDLFlBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLGlDQUFXO0FBQzVCLGFBQUcsRUFBSCxHQUFHO0FBQ0gsY0FBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtBQUNwQixrQkFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUM5QiwwQkFBZ0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQjtTQUM3QyxDQUFDLENBQUM7Ozt5Q0FFSyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7Ozs7Ozs7Ozs7QUFFckMsNEJBQU8sSUFBSSxDQUFDLHdFQUF3RSxDQUFDLENBQUM7Ozs7O3lDQUdsRixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUU7Ozs7Ozs7Q0FDeEMsQ0FBQzs7QUFHRixlQUFjLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsUUFBUSxHQUFSLFFBQVE7UUFBRSxPQUFPLEdBQVAsT0FBTztRQUFFLG1CQUFtQixHQUFuQixtQkFBbUI7cUJBQ2hDLFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL2xvZ2dpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IElPU0xvZyBmcm9tICcuLi9kZXZpY2UtbG9nL2lvcy1sb2cnO1xuaW1wb3J0IElPU0NyYXNoTG9nIGZyb20gJy4uL2RldmljZS1sb2cvaW9zLWNyYXNoLWxvZyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb25zdCBTVVBQT1JURURfTE9HX1RZUEVTID0ge1xuICAnc3lzbG9nJzogJ1N5c3RlbSBMb2dzIC0gRGV2aWNlIGxvZ3MgZm9yIGlPUyBhcHBsaWNhdGlvbnMgb24gcmVhbCBkZXZpY2VzIGFuZCBzaW11bGF0b3JzJyxcbiAgJ2NyYXNobG9nJzogJ0NyYXNoIExvZ3MgLSBDcmFzaCByZXBvcnRzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICdwZXJmb3JtYW5jZSc6ICdQZXJmb3JtYW5jZSBMb2dzIC0gRGVidWcgVGltZWxpbmVzIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycydcbn07XG5cbmNvbW1hbmRzLmdldExvZ1R5cGVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2dnZXIuZGVidWcoJ1JldHJpZXZpbmcgc3VwcG9ydGVkIGxvZyB0eXBlcycpO1xuICByZXR1cm4gXy5rZXlzKFNVUFBPUlRFRF9MT0dfVFlQRVMpO1xufTtcblxuY29tbWFuZHMuZ2V0TG9nID0gYXN5bmMgZnVuY3Rpb24gKGxvZ1R5cGUpIHtcbiAgbG9nZ2VyLmRlYnVnKGBSZXRyaWV2aW5nICcke2xvZ1R5cGV9JyBsb2dzYCk7XG4gIC8vIENoZWNrIGlmIHBhc3NlZCBsb2dUeXBlIGlzIHN1cHBvcnRlZFxuICBpZiAoIV8uaGFzKFNVUFBPUlRFRF9MT0dfVFlQRVMsIGxvZ1R5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBsb2cgdHlwZSAnJHtsb2dUeXBlfScgZm9yIHRoaXMgZGV2aWNlLiBTdXBwb3J0ZWQgdHlwZXMgOiAke0pTT04uc3RyaW5naWZ5KFNVUFBPUlRFRF9MT0dfVFlQRVMpfWApO1xuICB9XG5cbiAgLy8gbWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBsb2dzIGF0IGFsbFxuICAvLyBvdGhlcndpc2UgaXQncyBub3QgYmVlbiBpbml0aWFsaXplZFxuICBpZiAoXy5pc0VtcHR5KHRoaXMubG9ncykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxvZ3MgY3VycmVudGx5IGF2YWlsYWJsZS4gSXMgdGhlIGRldmljZS9zaW11bGF0b3Igc3RhcnRlZD8nKTtcbiAgfVxuXG4gIC8vIElmIGxvZ3MgY2FwdHVyZWQgc3VjY2Vzc2Z1bGx5IHNlbmQgcmVzcG9uc2Ugd2l0aCBkYXRhLCBlbHNlIHNlbmQgZXJyb3JcbiAgbGV0IGxvZ09iamVjdCA9IHRoaXMubG9nc1tsb2dUeXBlXTtcbiAgbGV0IGxvZ3MgPSBsb2dPYmplY3QgPyBhd2FpdCBsb2dPYmplY3QuZ2V0TG9ncygpIDogbnVsbDtcbiAgaWYgKGxvZ3MpIHtcbiAgICByZXR1cm4gbG9ncztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGxvZ3Mgb2YgdHlwZSAnJHtsb2dUeXBlfScgZm91bmQuYCk7XG4gIH1cbn07XG5cbmhlbHBlcnMuc3RhcnRMb2dDYXB0dXJlID0gYXN5bmMgZnVuY3Rpb24gKHNpbSkge1xuICBpZiAoIV8uaXNFbXB0eSh0aGlzLmxvZ3MpKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJUcnlpbmcgdG8gc3RhcnQgaU9TIGxvZyBjYXB0dXJlIGJ1dCBpdCdzIGFscmVhZHkgc3RhcnRlZCFcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubG9ncy5jcmFzaGxvZyA9IG5ldyBJT1NDcmFzaExvZygpO1xuICB0aGlzLmxvZ3Muc3lzbG9nID0gbmV3IElPU0xvZyh7XG4gICAgc2ltLFxuICAgIHVkaWQ6IHRoaXMub3B0cy51ZGlkLFxuICAgIHNob3dMb2dzOiB0aGlzLm9wdHMuc2hvd0lPU0xvZyxcbiAgICByZWFsRGV2aWNlTG9nZ2VyOiB0aGlzLm9wdHMucmVhbERldmljZUxvZ2dlcixcbiAgfSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5sb2dzLnN5c2xvZy5zdGFydENhcHR1cmUoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJDb3VsZCBub3QgY2FwdHVyZSBsb2dzIGZyb20gZGV2aWNlLiBDb250aW51aW5nIHdpdGhvdXQgY2FwdHVyaW5nIGxvZ3MuXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBhd2FpdCB0aGlzLmxvZ3MuY3Jhc2hsb2cuc3RhcnRDYXB0dXJlKCk7XG59O1xuXG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMsIFNVUFBPUlRFRF9MT0dfVFlQRVMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
