require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _libDeviceLogIosLog = require('../../lib/device-log/ios-log');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libDeviceLogLogger = require('../../lib/device-log/logger');

var _libDeviceLogLogger2 = _interopRequireDefault(_libDeviceLogLogger);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var LOG_DIR = _path2['default'].resolve('test', 'assets', 'logs');

describe('system logs', function () {
  var tmpSystemLog = undefined;
  var sim = undefined;
  beforeEach(function callee$1$0() {
    var fixSystemLog;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          // get the simulator, and stub what will be called
          sim = {
            udid: 'fake-udid',
            getLogDir: function getLogDir() {},
            getPlatformVersion: function getPlatformVersion() {}
          };
          _sinon2['default'].stub(sim, 'getLogDir').returns(LOG_DIR);
          _sinon2['default'].stub(sim, 'getPlatformVersion').returns('8.4');

          // copy the file into a temporary location, so we can muck with it
          fixSystemLog = _path2['default'].resolve(LOG_DIR, 'system.log.fixture');

          tmpSystemLog = _path2['default'].resolve(LOG_DIR, 'system.log');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(fixSystemLog, tmpSystemLog));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(tmpSystemLog));

        case 2:
          if (!context$2$0.sent) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tmpSystemLog));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should begin log capture', function callee$1$0() {
    var log, spy, message;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          log = new _.IOSLog({ sim: sim, showLogs: true });
          spy = _sinon2['default'].spy(_libDeviceLogLogger2['default'], 'info');
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(log.startCapture());

        case 4:
          message = 'This is a test log line';
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tmpSystemLog, message + '\n', { flag: 'a' }));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 9:

          spy.calledWith('[IOS_SYSLOG_ROW] ' + message).should.be['true'];

          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(log.stopCapture());

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should rotate log buffer', function callee$1$0() {
    var maxBufferSize, sliceSizeLimit, logRecordsCount, log, recentLogs, i, previousRecentLogs, reminder, firstBufferMessage, lastBufferMessage;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          maxBufferSize = 10;
          sliceSizeLimit = maxBufferSize / 2;

          sliceSizeLimit.should.be.below(maxBufferSize);
          logRecordsCount = maxBufferSize * 2;

          logRecordsCount.should.be.above(maxBufferSize);

          log = new _.IOSLog({ sim: sim, showLogs: false });

          log.maxBufferSize = maxBufferSize;
          log.logIdxSinceLastRequest.should.be.below(0);
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(log.getLogs());

        case 10:
          recentLogs = context$2$0.sent;

          recentLogs.should.have.lengthOf(0);
          log.logIdxSinceLastRequest.should.be.below(0);

          i = 1;

        case 14:
          if (!(i <= logRecordsCount)) {
            context$2$0.next = 30;
            break;
          }

          log.logRow = i + '\n';
          log.onOutput();

          if (!(i >= sliceSizeLimit && i % sliceSizeLimit === 0)) {
            context$2$0.next = 26;
            break;
          }

          previousRecentLogs = recentLogs;
          context$2$0.next = 21;
          return _regeneratorRuntime.awrap(log.getLogs());

        case 21:
          recentLogs = context$2$0.sent;

          if (previousRecentLogs.length && recentLogs.length) {
            previousRecentLogs[0].message.should.not.be.equal(recentLogs[0].message);
          }
          recentLogs.should.have.lengthOf(sliceSizeLimit);
          reminder = log.logIdxSinceLastRequest % sliceSizeLimit;

          reminder.should.equal(0);

        case 26:
          log.logs.should.have.lengthOf(i < maxBufferSize ? i : maxBufferSize);

        case 27:
          ++i;
          context$2$0.next = 14;
          break;

        case 30:
          firstBufferMessage = parseInt(log.logs[0].message, 10);

          firstBufferMessage.should.be.equal(logRecordsCount - log.logs.length + 1);
          lastBufferMessage = parseInt(log.logs[log.logs.length - 1].message, 10);

          lastBufferMessage.should.be.equal(logRecordsCount);

        case 34:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('real device logging', function () {
    function getLogger(realDeviceLogger) {
      var log = new _.IOSLog({ sim: sim, udid: '1234', realDeviceLogger: realDeviceLogger });
      log.finishStartingLogCapture = function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      };
      return log;
    }
    describe('idevicesyslog', function () {
      describe('system version', function () {
        var whichStub = undefined;
        afterEach(function () {
          whichStub.restore();
        });

        it('should use system idevicesyslog if no path specified', function callee$4$0() {
          var log;
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                whichStub = _sinon2['default'].stub(_appiumSupport.fs, 'which').returns('/path/to/idevicesyslog');
                log = getLogger('idevicesyslog');
                context$5$0.next = 4;
                return _regeneratorRuntime.awrap(log.startCapture());

              case 4:
                log.proc.cmd.should.eql('idevicesyslog');

              case 5:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
        it('should fail if no system idevicesyslog found', function callee$4$0() {
          var log;
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                whichStub = _sinon2['default'].stub(_appiumSupport.fs, 'which').throws(new Error('ENOENT'));
                log = getLogger('idevicesyslog');
                context$5$0.next = 4;
                return _regeneratorRuntime.awrap(log.startCapture().should.eventually.be.rejectedWith(/Unable to find system idevicesyslog/));

              case 4:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
      });
      describe('specific path', function () {
        var existstub = undefined;
        afterEach(function () {
          existstub.restore();
        });
        it('should use specified idevicesyslog if given', function callee$4$0() {
          var log;
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                existstub = _sinon2['default'].stub(_appiumSupport.fs, 'exists').returns(true);
                log = getLogger('/path/to/my/idevicesyslog');
                context$5$0.next = 4;
                return _regeneratorRuntime.awrap(log.startCapture());

              case 4:
                log.proc.cmd.should.eql('/path/to/my/idevicesyslog');

              case 5:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
        it('should fail if specified idevicesyslog is not found', function callee$4$0() {
          var log;
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                existstub = _sinon2['default'].stub(_appiumSupport.fs, 'exists').returns(false);
                log = getLogger('/path/to/my/idevicesyslog');
                context$5$0.next = 4;
                return _regeneratorRuntime.awrap(log.startCapture().should.eventually.be.rejectedWith(/Unable to find idevicesyslog from 'realDeviceLogger' capability/));

              case 4:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
      });
    });
    describe('deviceconsole', function () {
      var dcPath = '/path/to/deviceconsole/install/directory';
      var statStub = undefined;
      afterEach(function () {
        statStub.restore();
      });

      function initStatStub() {
        var directory = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
        var throws = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

        statStub = _sinon2['default'].stub(_appiumSupport.fs, 'stat');
        if (throws) {
          statStub.throws(new Error('ENOENT'));
        } else {
          statStub.returns({
            isDirectory: function isDirectory() {
              return directory;
            }
          });
        }
      }

      it('should correctly parse the install directory from executable path', function callee$3$0() {
        var log;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              initStatStub(false);
              log = getLogger(dcPath + '/deviceconsole');
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(log.startCapture());

            case 4:
              log.proc.cmd.should.eql(dcPath + '/deviceconsole');
              log.proc.opts.env.DYLD_LIBRARY_PATH.indexOf(dcPath).should.eql(0);

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should correctly use the install directory when given directly', function callee$3$0() {
        var log;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              initStatStub();
              log = getLogger(dcPath);
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(log.startCapture());

            case 4:
              log.proc.cmd.should.eql(dcPath + '/deviceconsole');
              log.proc.opts.env.DYLD_LIBRARY_PATH.indexOf(dcPath).should.eql(0);

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should use default deviceconsole if path not passed in', function callee$3$0() {
        var log;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              initStatStub();
              log = getLogger('deviceconsole');
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(log.startCapture());

            case 4:
              log.proc.cmd.should.eql(_libDeviceLogIosLog.DEVICE_CONSOLE_PATH + '/deviceconsole');
              log.proc.opts.env.DYLD_LIBRARY_PATH.indexOf(_libDeviceLogIosLog.DEVICE_CONSOLE_PATH).should.eql(0);

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should fail if an executable other than deviceconsole is passed in', function callee$3$0() {
        var log;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              initStatStub(false);
              log = getLogger(dcPath + '/someotherlogger');
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(log.startCapture().should.eventually.be.rejectedWith(/Unable to parse 'deviceconsole' installation directory/));

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should fail if path passed in is not stat-able', function callee$3$0() {
        var log;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              initStatStub(false, true);
              log = getLogger('/path/to/something/that/does/not/exist');
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(log.startCapture().should.eventually.be.rejectedWith(/Unknown 'realDeviceLogger'/));

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('anything else', function () {
      it('should fail if something other than idevicesyslog or deviceconsole are specified', function callee$3$0() {
        var log;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              log = getLogger('mysupadupalogga');
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(log.startCapture().should.eventually.be.rejectedWith(/Unable to capture device log. Unknown 'realDeviceLogger'/));

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
  });
});

// on some slow system (e.g., Travis) need a moment
//# sourceMappingURL=data:application/json;charset=utf8;base64,
