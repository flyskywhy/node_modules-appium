require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../../..');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumTestSupport = require('appium-test-support');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _helpers = require('./helpers');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Early failures', (0, _appiumTestSupport.withSandbox)({}, function (S) {
  it('should error when Xcode does not support Instruments', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          S.sandbox.stub(_appiumXcode2['default'], 'getVersion').returns((0, _helpers.getXcodeVersion)(8, 0, 0));

          instruments = new _.Instruments({});
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done(); // eslint-disable-line
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/Instruments-based automation was removed in Xcode 8/));

        case 6:
          onExitSpy.callCount.should.eql(0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should error when Xcode 5.0.1 is used', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          S.sandbox.stub(_appiumXcode2['default'], 'getVersion').returns((0, _helpers.getXcodeVersion)(5, 0, 1));

          instruments = new _.Instruments({});
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done(); // eslint-disable-line
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/Xcode 5.0.1 ships with a broken version of Instruments/));

        case 6:
          onExitSpy.callCount.should.eql(0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should error on getAutomationTraceTemplatePath failure', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          S.sandbox.stub(_appiumXcode2['default'], 'getVersion').returns((0, _helpers.getXcodeVersion)());
          S.sandbox.stub(_appiumXcode2['default'], 'getAutomationTraceTemplatePath').returns(_bluebird2['default'].reject(new Error('ouch!')));

          instruments = new _.Instruments({});
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done(); // eslint-disable-line
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/ouch!/));

        case 7:
          onExitSpy.callCount.should.eql(0);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should error on getInstrumentsPath failure', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          S.sandbox.stub(_appiumXcode2['default'], 'getVersion').returns((0, _helpers.getXcodeVersion)());
          S.sandbox.stub(_appiumXcode2['default'], 'getAutomationTraceTemplatePath').returns('/path/to/trace/template');

          instruments = new _.Instruments({});

          S.sandbox.stub(_.instrumentsUtils, 'getInstrumentsPath').returns(_bluebird2['default'].reject(new Error('ouch!')));
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done(); // eslint-disable-line
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/ouch!/));

        case 8:
          onExitSpy.callCount.should.eql(0);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9pbnN0cnVtZW50cy9lYXJseS1mYWlsdXJlcy1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O2dCQUU4QyxVQUFVOztvQkFDdkMsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7cUJBQzNCLE9BQU87Ozs7aUNBQ0cscUJBQXFCOzt3QkFDbkMsVUFBVTs7OzsyQkFDTixjQUFjOzs7O3VCQUNBLFdBQVc7O0FBRzNDLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLGdCQUFnQixFQUFFLG9DQUFZLEVBQUUsRUFBRSxVQUFDLENBQUMsRUFBSztBQUNoRCxJQUFFLENBQUMsc0RBQXNELEVBQUU7UUFHckQsV0FBVyxFQUNYLFNBQVM7Ozs7QUFIYixXQUFDLENBQUMsT0FBTyxDQUFDLElBQUksMkJBQVEsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDhCQUFnQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRWxFLHFCQUFXLEdBQUcsa0JBQWdCLEVBQUUsQ0FBQztBQUNqQyxtQkFBUyxHQUFHLG1CQUFNLEdBQUcsRUFBRTs7QUFDM0IscUJBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7MkNBQ25ELFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxxREFBcUQsQ0FBQzs7O0FBQ3hHLG1CQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7R0FDbkMsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyx1Q0FBdUMsRUFBRTtRQUd0QyxXQUFXLEVBQ1gsU0FBUzs7OztBQUhiLFdBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSwyQkFBUSxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsOEJBQWdCLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFbEUscUJBQVcsR0FBRyxrQkFBZ0IsRUFBRSxDQUFDO0FBQ2pDLG1CQUFTLEdBQUcsbUJBQU0sR0FBRyxFQUFFOztBQUMzQixxQkFBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDOzsyQ0FDbkQsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLHdEQUF3RCxDQUFDOzs7QUFDM0csbUJBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztHQUNuQyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHdEQUF3RCxFQUFFO1FBSXZELFdBQVcsRUFDWCxTQUFTOzs7O0FBSmIsV0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDJCQUFRLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQywrQkFBaUIsQ0FBQyxDQUFDO0FBQy9ELFdBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSwyQkFBUSxnQ0FBZ0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxzQkFBRSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUUxRixxQkFBVyxHQUFHLGtCQUFnQixFQUFFLENBQUM7QUFDakMsbUJBQVMsR0FBRyxtQkFBTSxHQUFHLEVBQUU7O0FBQzNCLHFCQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7OzJDQUNuRCxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDOzs7QUFDMUQsbUJBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztHQUNuQyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDRDQUE0QyxFQUFFO1FBSTNDLFdBQVcsRUFFWCxTQUFTOzs7O0FBTGIsV0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDJCQUFRLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQywrQkFBaUIsQ0FBQyxDQUFDO0FBQy9ELFdBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSwyQkFBUSxnQ0FBZ0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDOztBQUV2RixxQkFBVyxHQUFHLGtCQUFnQixFQUFFLENBQUM7O0FBQ3JDLFdBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxxQkFBbUIsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsc0JBQUUsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RixtQkFBUyxHQUFHLG1CQUFNLEdBQUcsRUFBRTs7QUFDM0IscUJBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7MkNBQ25ELFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7OztBQUMxRCxtQkFBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0dBQ25DLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC9pbnN0cnVtZW50cy9lYXJseS1mYWlsdXJlcy1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgeyBJbnN0cnVtZW50cywgaW5zdHJ1bWVudHNVdGlscyB9IGZyb20gJy4uLy4uLy4uJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCB7IHdpdGhTYW5kYm94IH0gZnJvbSAnYXBwaXVtLXRlc3Qtc3VwcG9ydCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCB7IGdldFhjb2RlVmVyc2lvbiB9IGZyb20gJy4vaGVscGVycyc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ0Vhcmx5IGZhaWx1cmVzJywgd2l0aFNhbmRib3goe30sIChTKSA9PiB7XG4gIGl0KCdzaG91bGQgZXJyb3Igd2hlbiBYY29kZSBkb2VzIG5vdCBzdXBwb3J0IEluc3RydW1lbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgIFMuc2FuZGJveC5zdHViKHhjb2RlLCAnZ2V0VmVyc2lvbicpLnJldHVybnMoZ2V0WGNvZGVWZXJzaW9uKDgsIDAsIDApKTtcblxuICAgIGxldCBpbnN0cnVtZW50cyA9IG5ldyBJbnN0cnVtZW50cyh7fSk7XG4gICAgbGV0IG9uRXhpdFNweSA9IHNpbm9uLnNweSgpO1xuICAgIGluc3RydW1lbnRzLm9uU2h1dGRvd24udGhlbihvbkV4aXRTcHksIG9uRXhpdFNweSkuZG9uZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgYXdhaXQgaW5zdHJ1bWVudHMubGF1bmNoKCkuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvSW5zdHJ1bWVudHMtYmFzZWQgYXV0b21hdGlvbiB3YXMgcmVtb3ZlZCBpbiBYY29kZSA4Lyk7XG4gICAgb25FeGl0U3B5LmNhbGxDb3VudC5zaG91bGQuZXFsKDApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVycm9yIHdoZW4gWGNvZGUgNS4wLjEgaXMgdXNlZCcsIGFzeW5jICgpID0+IHtcbiAgICBTLnNhbmRib3guc3R1Yih4Y29kZSwgJ2dldFZlcnNpb24nKS5yZXR1cm5zKGdldFhjb2RlVmVyc2lvbig1LCAwLCAxKSk7XG5cbiAgICBsZXQgaW5zdHJ1bWVudHMgPSBuZXcgSW5zdHJ1bWVudHMoe30pO1xuICAgIGxldCBvbkV4aXRTcHkgPSBzaW5vbi5zcHkoKTtcbiAgICBpbnN0cnVtZW50cy5vblNodXRkb3duLnRoZW4ob25FeGl0U3B5LCBvbkV4aXRTcHkpLmRvbmUoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGF3YWl0IGluc3RydW1lbnRzLmxhdW5jaCgpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL1hjb2RlIDUuMC4xIHNoaXBzIHdpdGggYSBicm9rZW4gdmVyc2lvbiBvZiBJbnN0cnVtZW50cy8pO1xuICAgIG9uRXhpdFNweS5jYWxsQ291bnQuc2hvdWxkLmVxbCgwKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlcnJvciBvbiBnZXRBdXRvbWF0aW9uVHJhY2VUZW1wbGF0ZVBhdGggZmFpbHVyZScsIGFzeW5jICgpID0+IHtcbiAgICBTLnNhbmRib3guc3R1Yih4Y29kZSwgJ2dldFZlcnNpb24nKS5yZXR1cm5zKGdldFhjb2RlVmVyc2lvbigpKTtcbiAgICBTLnNhbmRib3guc3R1Yih4Y29kZSwgJ2dldEF1dG9tYXRpb25UcmFjZVRlbXBsYXRlUGF0aCcpLnJldHVybnMoQi5yZWplY3QobmV3IEVycm9yKCdvdWNoIScpKSk7XG5cbiAgICBsZXQgaW5zdHJ1bWVudHMgPSBuZXcgSW5zdHJ1bWVudHMoe30pO1xuICAgIGxldCBvbkV4aXRTcHkgPSBzaW5vbi5zcHkoKTtcbiAgICBpbnN0cnVtZW50cy5vblNodXRkb3duLnRoZW4ob25FeGl0U3B5LCBvbkV4aXRTcHkpLmRvbmUoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGF3YWl0IGluc3RydW1lbnRzLmxhdW5jaCgpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL291Y2ghLyk7XG4gICAgb25FeGl0U3B5LmNhbGxDb3VudC5zaG91bGQuZXFsKDApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVycm9yIG9uIGdldEluc3RydW1lbnRzUGF0aCBmYWlsdXJlJywgYXN5bmMgKCkgPT4ge1xuICAgIFMuc2FuZGJveC5zdHViKHhjb2RlLCAnZ2V0VmVyc2lvbicpLnJldHVybnMoZ2V0WGNvZGVWZXJzaW9uKCkpO1xuICAgIFMuc2FuZGJveC5zdHViKHhjb2RlLCAnZ2V0QXV0b21hdGlvblRyYWNlVGVtcGxhdGVQYXRoJykucmV0dXJucygnL3BhdGgvdG8vdHJhY2UvdGVtcGxhdGUnKTtcblxuICAgIGxldCBpbnN0cnVtZW50cyA9IG5ldyBJbnN0cnVtZW50cyh7fSk7XG4gICAgUy5zYW5kYm94LnN0dWIoaW5zdHJ1bWVudHNVdGlscywgJ2dldEluc3RydW1lbnRzUGF0aCcpLnJldHVybnMoQi5yZWplY3QobmV3IEVycm9yKCdvdWNoIScpKSk7XG4gICAgbGV0IG9uRXhpdFNweSA9IHNpbm9uLnNweSgpO1xuICAgIGluc3RydW1lbnRzLm9uU2h1dGRvd24udGhlbihvbkV4aXRTcHksIG9uRXhpdFNweSkuZG9uZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgYXdhaXQgaW5zdHJ1bWVudHMubGF1bmNoKCkuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvb3VjaCEvKTtcbiAgICBvbkV4aXRTcHkuY2FsbENvdW50LnNob3VsZC5lcWwoMCk7XG4gIH0pO1xufSkpO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
