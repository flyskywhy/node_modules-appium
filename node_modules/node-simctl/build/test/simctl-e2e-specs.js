/* global it:true, describe:true*/
require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libSimctlJs = require('../lib/simctl.js');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var _asyncbox = require('asyncbox');

var should = _chai2['default'].should();

describe('simctl', function () {
  var _this = this;

  var DEVICE_NAME = 'iPhone 6';
  var MOCHA_TIMEOUT = 200000;
  this.timeout(MOCHA_TIMEOUT);

  var randName = undefined;
  var randDeviceUdid = null;
  var validSdks = [];

  before(function callee$1$0() {
    var devices, i, randNum, nameFound, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, list;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 2:
          devices = context$2$0.sent;

          validSdks = _lodash2['default'].keys(devices).sort(function (a, b) {
            return a - b;
          });

          if (validSdks.length) {
            context$2$0.next = 6;
            break;
          }

          throw new Error('No valid SDKs');

        case 6:
          console.log('Found valid SDKs: ' + validSdks.join(', ')); // eslint-disable-line no-console

          // need to find a random name that does not already exist
          // give it 5 tries
          i = 0;

        case 8:
          if (!(i < 5)) {
            context$2$0.next = 44;
            break;
          }

          randNum = parseInt(Math.random() * 100, 10);

          randName = 'device' + randNum;

          nameFound = false;
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 15;
          _iterator = _getIterator(_lodash2['default'].values(devices));

        case 17:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            context$2$0.next = 25;
            break;
          }

          list = _step.value;

          if (!_lodash2['default'].includes(_lodash2['default'].map(list, 'name'), randName)) {
            context$2$0.next = 22;
            break;
          }

          // need to find another random name
          nameFound = true;
          return context$2$0.abrupt('break', 25);

        case 22:
          _iteratorNormalCompletion = true;
          context$2$0.next = 17;
          break;

        case 25:
          context$2$0.next = 31;
          break;

        case 27:
          context$2$0.prev = 27;
          context$2$0.t0 = context$2$0['catch'](15);
          _didIteratorError = true;
          _iteratorError = context$2$0.t0;

        case 31:
          context$2$0.prev = 31;
          context$2$0.prev = 32;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 34:
          context$2$0.prev = 34;

          if (!_didIteratorError) {
            context$2$0.next = 37;
            break;
          }

          throw _iteratorError;

        case 37:
          return context$2$0.finish(34);

        case 38:
          return context$2$0.finish(31);

        case 39:
          if (nameFound) {
            context$2$0.next = 41;
            break;
          }

          return context$2$0.abrupt('break', 44);

        case 41:
          i++;
          context$2$0.next = 8;
          break;

        case 44:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[15, 27, 31, 39], [32,, 34, 38]]);
  });

  // eslint-disable-line curly
  it('should create a device', function callee$1$0() {
    var udid;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)(randName, DEVICE_NAME, _lodash2['default'].last(validSdks)));

        case 2:
          udid = context$2$0.sent;

          (typeof udid).should.equal('string');
          udid.length.should.equal(36);

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should get devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(_lodash2['default'].last(validSdks)));

        case 2:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].map(sdkDevices, 'name').should.include(randName);
          randDeviceUdid = sdkDevices.filter(function (d) {
            return d.name === randName;
          })[0].udid;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should erase devices', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.eraseDevice)(randDeviceUdid, 16000));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should delete devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(randDeviceUdid));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(_lodash2['default'].last(validSdks)));

        case 4:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].map(sdkDevices, 'name').should.not.include(randName);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should return a nice error for invalid usage', function callee$1$0() {
    var err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = null;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('foo', 'bar', 'baz'));

        case 4:
          context$2$0.next = 9;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t0 = context$2$0['catch'](1);

          err = context$2$0.t0;

        case 9:
          should.exist(err);
          err.message.should.include('Invalid device type: bar');

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[1, 6]]);
  });

  it('should create a device and be able to see it in devices list right away', function callee$1$0() {
    var sdk, numSimsBefore, udid, numSimsAfter;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sdk = _lodash2['default'].last(validSdks);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 3:
          context$2$0.t0 = sdk;
          numSimsBefore = context$2$0.sent[context$2$0.t0].length;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('node-simctl test', DEVICE_NAME, sdk));

        case 7:
          udid = context$2$0.sent;
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 10:
          context$2$0.t1 = sdk;
          numSimsAfter = context$2$0.sent[context$2$0.t1].length;

          numSimsAfter.should.equal(numSimsBefore + 1);
          (0, _libSimctlJs.deleteDevice)(udid);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should create a device with compatible properties', function callee$1$0() {
    var sdk, devices, firstDevice, expectedList;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sdk = _lodash2['default'].last(validSdks);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 3:
          context$2$0.t0 = sdk;
          devices = context$2$0.sent[context$2$0.t0];
          firstDevice = devices[0];
          expectedList = ['name', 'sdk', 'state', 'udid'];

          _Object$keys(firstDevice).sort().should.eql(expectedList);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('on running Simulator', function () {
    if (process.env.TRAVIS) {
      this.retries(3);
    }

    var udid = undefined;
    var major = undefined,
        minor = undefined;

    before(function callee$2$0() {
      var _ref, sdk;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

          case 2:
            _ref = context$3$0.sent;
            major = _ref.major;
            minor = _ref.minor;

            if (!(major < 8 || major === 8 && minor < 1)) {
              context$3$0.next = 7;
              break;
            }

            return context$3$0.abrupt('return', this.skip());

          case 7:
            sdk = _lodash2['default'].last(validSdks);
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('runningSimTest', DEVICE_NAME, sdk));

          case 10:
            udid = context$3$0.sent;
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.bootDevice)(udid));

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.launch)(udid, 'com.apple.springboard', MOCHA_TIMEOUT));

          case 15:
            context$3$0.next = 17;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(5000));

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            if (!udid) {
              context$3$0.next = 10;
              break;
            }

            context$3$0.prev = 1;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.shutdown)(udid));

          case 4:
            context$3$0.next = 8;
            break;

          case 6:
            context$3$0.prev = 6;
            context$3$0.t0 = context$3$0['catch'](1);

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(udid));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[1, 6]]);
    });

    describe('pasteboard', function () {
      var pbRetries = 0;
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              if (!(major < 8 || major === 8 && minor < 1)) {
                context$4$0.next = 2;
                break;
              }

              return context$4$0.abrupt('return', this.skip());

            case 2:
              if (major === 9) {
                // TODO: recheck when full Xcode 9 comes out to see if pasteboard works better
                pbRetries = 200;
                this.timeout(200 * 1000 * 2);
              }

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should set and get the content of the pasteboard', function callee$3$0() {
        var pbContent, encoding;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          var _this2 = this;

          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              pbContent = 'blablabla';
              encoding = 'ascii';
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap((0, _libSimctlJs.setPasteboard)(udid, pbContent, encoding));

            case 4:
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(pbRetries, 1000, function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _libSimctlJs.getPasteboard)(udid, encoding));

                    case 2:
                      context$5$0.t0 = pbContent;
                      context$5$0.sent.should.eql(context$5$0.t0);

                    case 4:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this2);
              }));

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('add media', function () {
      var BASE64_PNG = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==';
      var picturePath = undefined;
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              if (!(major < 8 || major === 8 && minor < 1)) {
                context$4$0.next = 2;
                break;
              }

              return context$4$0.abrupt('return', this.skip());

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'pixel', suffix: '.png' }));

            case 4:
              picturePath = context$4$0.sent;
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(picturePath, new Buffer(BASE64_PNG, 'base64').toString('binary'), 'binary'));

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      after(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(picturePath));

            case 2:
              if (!context$4$0.sent) {
                context$4$0.next = 5;
                break;
              }

              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(picturePath));

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should add media files', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _libSimctlJs.addMedia)(udid, picturePath));

            case 2:
              context$4$0.sent.code.should.eql(0);

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    it('should extract applications information', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.appInfo)(udid, 'com.apple.springboard'));

          case 2:
            context$3$0.sent.should.include('ApplicationType');

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});

// Wait for boot to complete

// pause a moment or everything is messed up
//# sourceMappingURL=data:application/json;charset=utf8;base64,
