'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _2 = require('../../..');

var _3 = _interopRequireDefault(_2);

var _libCommandsPerformanceJs = require('../../../lib/commands/performance.js');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumTestSupport = require('appium-test-support');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var PACKAGE_NAME = 'io.appium.android.apis';

var adb = new _appiumAdb2['default']();
var driver = new _3['default']();
driver.adb = adb;

describe('performance data', function () {
  this.timeout(60000);

  describe('getperformancedata', (0, _appiumTestSupport.withMocks)({ adb: adb, driver: driver }, function (mocks) {
    var _this = this;

    it('should get the list of available getPerformance data type', function () {
      var types = driver.getPerformanceDataTypes();
      types.should.eql(_lodash2['default'].keys(_libCommandsPerformanceJs.SUPPORTED_PERFORMANCE_DATA_TYPES));
    });

    function runTest(type, expectedKeys, expectedData) {
      var data;
      return _regeneratorRuntime.async(function runTest$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getPerformanceData(PACKAGE_NAME, type));

          case 2:
            data = context$3$0.sent;

            // make sure we got something
            Array.isArray(data).should.be['true'];
            data.length.should.eql(2);

            data[0].should.eql(expectedKeys);
            data[1].should.eql(expectedData);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    }

    var types = [{
      cmd: 'cpuinfo',
      description: 'the amount of cpu by user and kernel process',
      args: ['dumpsys', 'cpuinfo', '|', 'grep', '\'' + PACKAGE_NAME + '\''],
      dumpsysData: ' +0% 2209/io.appium.android.apis: 14% user + 23% kernel',
      keys: _libCommandsPerformanceJs.CPU_KEYS,
      data: ['14', '23']
    }, {
      cmd: 'memoryinfo',
      description: 'the amount of memory used by the process (API level 19)',
      args: ['dumpsys', 'meminfo', '\'' + PACKAGE_NAME + '\'', '|', 'grep', '-E', "'Native|Dalvik|EGL|GL|TOTAL'"],
      dumpsysData: '  Native Heap     2469     2332        0        0    20480    13920     6559\n     Dalvik Heap      873      808        0        0     1526      578      948\n    Dalvik Other      148      148        0        0\n           TOTAL     7757     4012      976        0    22006    14498     7507',
      keys: _libCommandsPerformanceJs.MEMORY_KEYS,
      data: ['4012', '2332', '808', undefined, undefined, '7757', '2469', '873', undefined, undefined, '13920', '20480'],
      apiLevel: '19'
    }, {
      cmd: 'memoryinfo',
      description: 'the amount of memory used by the process (API level 19)',
      args: ['dumpsys', 'meminfo', '\'' + PACKAGE_NAME + '\'', '|', 'grep', '-E', "'Native|Dalvik|EGL|GL|TOTAL'"],
      dumpsysData: 'Native|Dalvik|EGL|GL|TOTAL\'\n         Native     1050     1236      968     7580     7428       31\n         Dalvik     2637     5592     2288     3960     3453      507\n          TOTAL     6796    11688     4288    11540    10881      538',
      keys: _libCommandsPerformanceJs.MEMORY_KEYS,
      data: ['4288', '968', '2288', undefined, undefined, '6796', '1050', '2637', undefined, undefined, '7428', '7580'],
      apiLevel: '18'
    }, {
      cmd: 'batteryinfo',
      description: 'the remaining battery power',
      args: ['dumpsys', 'battery', '|', 'grep', 'level'],
      dumpsysData: '  level: 47',
      keys: _libCommandsPerformanceJs.BATTERY_KEYS,
      data: ['47']
    }];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function () {
        var type = _step.value;

        describe(type.cmd, function () {
          afterEach(function () {
            mocks.adb.verify();
          });
          it('should get ' + type.description, function callee$4$0() {
            return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
              while (1) switch (context$5$0.prev = context$5$0.next) {
                case 0:
                  if (type.apiLevel) {
                    mocks.adb.expects('getApiLevel').returns(type.apiLevel);
                  }
                  mocks.adb.expects('shell').withExactArgs(type.args).returns(type.dumpsysData);
                  context$5$0.next = 4;
                  return _regeneratorRuntime.awrap(runTest(type.cmd, type.keys, type.data));

                case 4:
                case 'end':
                  return context$5$0.stop();
              }
            }, null, _this);
          });
          it('should retry if the data is not initially found', function callee$4$0() {
            return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
              while (1) switch (context$5$0.prev = context$5$0.next) {
                case 0:
                  if (type.apiLevel) {
                    mocks.adb.expects('getApiLevel').returns(type.apiLevel);
                  }
                  mocks.adb.expects('shell').twice().withExactArgs(type.args).onCall(0).returns().onCall(1).returns(type.dumpsysData);
                  context$5$0.next = 4;
                  return _regeneratorRuntime.awrap(runTest(type.cmd, type.keys, type.data));

                case 4:
                case 'end':
                  return context$5$0.stop();
              }
            }, null, _this);
          });
          it('should error out if too many failures', function callee$4$0() {
            return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
              while (1) switch (context$5$0.prev = context$5$0.next) {
                case 0:
                  mocks.adb.expects('shell').twice().withExactArgs(type.args).onCall(0).returns().onCall(1).returns();
                  context$5$0.next = 3;
                  return _regeneratorRuntime.awrap(runTest(type.cmd, type.keys, type.data).should.be.rejected);

                case 3:
                case 'end':
                  return context$5$0.stop();
              }
            }, null, _this);
          });
        });
      };

      for (var _iterator = _getIterator(types), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    describe('networkinfo', function () {
      it('should get the network statistics', function () {
        var returnValue = [['bucketStart', 'activeTime', 'rxBytes', 'rxPackets', 'txBytes', 'txPackets', 'operations', 'bucketDuration'], [1478091600000, 1099075, 610947, 928, 114362, 769, 0, 3600000], [1478095200000, 1306300, 405997, 509, 46359, 370, 0, 3600000]];
        mocks.driver.expects('getPerformanceData').withExactArgs('io.appium.android.apis', 'networkinfo', 1000).returns(returnValue);
        var network = driver.getPerformanceData('io.appium.android.apis', 'networkinfo', 1000);
        network.length.should.eql(3);
        var compare = false;

        for (var j = 0; j < _libCommandsPerformanceJs.NETWORK_KEYS.length; ++j) {
          if (_lodash2['default'].isEqual(_libCommandsPerformanceJs.NETWORK_KEYS[j], network[0])) {
            compare = true;
          }
        }

        compare.should.equal(true);

        if (network.length > 1) {
          for (var i = 1; i < network.length; ++i) {
            network[0].length.should.equal(network[i].length);
          }
        }
        mocks.driver.verify();
      });
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
