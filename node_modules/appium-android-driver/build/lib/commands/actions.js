'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _androidHelpers = require('../android-helpers');

var _androidHelpers2 = _interopRequireDefault(_androidHelpers);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

var _teen_process = require('teen_process');

var swipeStepsPerSec = 28;
var dragStepsPerSec = 40;

var commands = {},
    helpers = {},
    extensions = {};

commands.keyevent = function callee$0$0(keycode) {
  var metastate = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // TODO deprecate keyevent; currently wd only implements keyevent
        _logger2['default'].warn("keyevent will be deprecated use pressKeyCode");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.pressKeyCode(keycode, metastate));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pressKeyCode = function callee$0$0(keycode) {
  var metastate = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("pressKeyCode", { keycode: keycode, metastate: metastate }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.longPressKeyCode = function callee$0$0(keycode) {
  var metastate = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("longPressKeyCode", { keycode: keycode, metastate: metastate }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getOrientation = function callee$0$0() {
  var params, orientation;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {
          naturalOrientation: !!this.opts.androidNaturalOrientation
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("orientation", params));

      case 3:
        orientation = context$1$0.sent;
        return context$1$0.abrupt('return', orientation.toUpperCase());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setOrientation = function callee$0$0(orientation) {
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        orientation = orientation.toUpperCase();
        params = {
          orientation: orientation,
          naturalOrientation: !!this.opts.androidNaturalOrientation
        };
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("orientation", params));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.fakeFlick = function callee$0$0(xSpeed, ySpeed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('flick', { xSpeed: xSpeed, ySpeed: ySpeed }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.fakeFlickElement = function callee$0$0(elementId, xoffset, yoffset, speed) {
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = { xoffset: xoffset, yoffset: yoffset, speed: speed, elementId: elementId };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('element:flick', params));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.swipe = function callee$0$0(startX, startY, endX, endY, duration, touchCount, elId) {
  var swipeOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (startX === 'null') {
          startX = 0.5;
        }
        if (startY === 'null') {
          startY = 0.5;
        }
        swipeOpts = { startX: startX, startY: startY, endX: endX, endY: endY,
          steps: Math.round(duration * swipeStepsPerSec) };

        // going the long way and checking for undefined and null since
        // we can't be assured `elId` is a string and not an int
        if (_appiumSupport.util.hasValue(elId)) {
          swipeOpts.elementId = elId;
        }
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.doSwipe(swipeOpts));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.doSwipe = function callee$0$0(swipeOpts) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(swipeOpts.elementId)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("element:swipe", swipeOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("swipe", swipeOpts));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pinchClose = function callee$0$0(startX, startY, endX, endY, duration, percent, steps, elId) {
  var pinchOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pinchOpts = {
          direction: 'in',
          elementId: elId,
          percent: percent,
          steps: steps
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("element:pinch", pinchOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pinchOpen = function callee$0$0(startX, startY, endX, endY, duration, percent, steps, elId) {
  var pinchOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pinchOpts = { direction: 'out', elementId: elId, percent: percent, steps: steps };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("element:pinch", pinchOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.flick = function callee$0$0(element, xSpeed, ySpeed, xOffset, yOffset, speed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!element) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.fakeFlickElement(element, xOffset, yOffset, speed));

      case 3:
        context$1$0.next = 7;
        break;

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.fakeFlick(xSpeed, ySpeed));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.drag = function callee$0$0(startX, startY, endX, endY, duration, touchCount, elementId, destElId) {
  var dragOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        dragOpts = {
          elementId: elementId, destElId: destElId, startX: startX, startY: startY, endX: endX, endY: endY,
          steps: Math.round(duration * dragStepsPerSec)
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.doDrag(dragOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.doDrag = function callee$0$0(dragOpts) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(dragOpts.elementId)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("element:drag", dragOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("drag", dragOpts));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.lock = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.lock());

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.isLocked = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isScreenLocked());

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.unlock = function callee$0$0(unlockCapabilities) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_androidHelpers2['default'].unlock(this, this.adb, unlockCapabilities));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.openNotifications = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("openNotification"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setLocation = function callee$0$0(latitude, longitude) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.sendTelnetCommand('geo fix ' + longitude + ' ' + latitude));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pullFile = function callee$0$0(remotePath) {
  var localFile, data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        localFile = _temp2['default'].path({ prefix: 'appium', suffix: '.tmp' });
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.adb.pull(remotePath, localFile));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localFile));

      case 6:
        data = context$1$0.sent;
        return context$1$0.abrupt('return', new Buffer(data).toString('base64'));

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 11:
        if (!context$1$0.sent) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 14:
        return context$1$0.finish(8);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1,, 8, 15]]);
};

commands.pushFile = function callee$0$0(remotePath, base64Data) {
  var localFile, content;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        localFile = _temp2['default'].path({ prefix: 'appium', suffix: '.tmp' });
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(_path2['default'].dirname(localFile)));

      case 3:
        content = new Buffer(base64Data, 'base64');
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(localFile, content.toString('binary'), 'binary'));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.adb.push(localFile, remotePath));

      case 9:
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 12:
        if (!context$1$0.sent) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 15:
        return context$1$0.finish(9);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4,, 9, 16]]);
};

commands.pullFolder = function callee$0$0(remotePath) {
  var localFolder;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        localFolder = _temp2['default'].path({ prefix: 'appium' });
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.pull(remotePath, localFolder));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.toInMemoryZip(localFolder));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent.toString('base64'));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.fingerprint = function callee$0$0(fingerprintId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("fingerprint method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.fingerprint(fingerprintId));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.sendSMS = function callee$0$0(phoneNumber, message) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("sendSMS method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.sendSMS(phoneNumber, message));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.gsmCall = function callee$0$0(phoneNumber, action) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("gsmCall method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.gsmCall(phoneNumber, action));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.gsmSignal = function callee$0$0(signalStrengh) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("gsmSignal method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.gsmSignal(signalStrengh));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.gsmVoice = function callee$0$0(state) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("gsmVoice method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.gsmVoice(state));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.powerAC = function callee$0$0(state) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("powerAC method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.powerAC(state));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.powerCapacity = function callee$0$0(batteryPercent) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("powerCapacity method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.powerCapacity(batteryPercent));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.networkSpeed = function callee$0$0(networkSpeed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("networkSpeed method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.networkSpeed(networkSpeed));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getScreenshotDataWithAdbShell = function callee$0$0(adb, opts) {
  var localFile, pngDir, png, cmd;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        localFile = _temp2['default'].path({ prefix: 'appium', suffix: '.png' });
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 3:
        if (!context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 6:
        context$1$0.prev = 6;
        pngDir = opts.androidScreenshotPath || '/data/local/tmp/';
        png = _path2['default'].posix.resolve(pngDir, 'screenshot.png');
        cmd = ['/system/bin/rm', png + ';', '/system/bin/screencap', '-p', png];
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(adb.shell(cmd));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(adb.fileSize(png));

      case 14:
        if (context$1$0.sent) {
          context$1$0.next = 16;
          break;
        }

        throw new Error('The size of the taken screenshot equals to zero.');

      case 16:
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(adb.pull(png, localFile));

      case 18:
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_jimp2['default'].read(localFile));

      case 20:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 21:
        context$1$0.prev = 21;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 24:
        if (!context$1$0.sent) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 27:
        return context$1$0.finish(21);

      case 28:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6,, 21, 28]]);
};

helpers.getScreenshotDataWithAdbExecOut = function callee$0$0(adb) {
  var _ref, stdout;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(adb.executable.path, ['exec-out', '/system/bin/screencap -p'], { encoding: 'binary', isBuffer: true }));

      case 2:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;

        if (stdout.length) {
          context$1$0.next = 6;
          break;
        }

        throw new Error('The size of the taken screenshot equals to zero.');

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_jimp2['default'].read(stdout));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getScreenshot = function callee$0$0() {
  var apiLevel, image, screenOrientation, getBuffer, imgBuffer;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.getApiLevel());

      case 2:
        apiLevel = context$1$0.sent;
        image = null;

        if (!(apiLevel > 20)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.getScreenshotDataWithAdbExecOut(this.adb));

      case 8:
        image = context$1$0.sent;
        context$1$0.next = 14;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](5);

        _logger2['default'].info('Cannot get screenshot data with \'adb exec-out\' because of \'' + context$1$0.t0.message + '\'. ' + 'Defaulting to \'adb shell\' call');

      case 14:
        if (image) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.getScreenshotDataWithAdbShell(this.adb, this.opts));

      case 18:
        image = context$1$0.sent;
        context$1$0.next = 24;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t1 = context$1$0['catch'](15);

        _logger2['default'].errorAndThrow('Cannot get screenshot data because of \'' + context$1$0.t1.message + '\'');

      case 24:
        if (!(apiLevel < 23)) {
          context$1$0.next = 37;
          break;
        }

        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(this.adb.getScreenOrientation());

      case 27:
        screenOrientation = context$1$0.sent;
        context$1$0.prev = 28;
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(image.rotate(-90 * screenOrientation));

      case 31:
        image = context$1$0.sent;
        context$1$0.next = 37;
        break;

      case 34:
        context$1$0.prev = 34;
        context$1$0.t2 = context$1$0['catch'](28);

        _logger2['default'].warn('Could not rotate screenshot due to error: ' + context$1$0.t2);

      case 37:
        getBuffer = _bluebird2['default'].promisify(image.getBuffer, { context: image });
        context$1$0.next = 40;
        return _regeneratorRuntime.awrap(getBuffer(_jimp2['default'].MIME_PNG));

      case 40:
        imgBuffer = context$1$0.sent;
        return context$1$0.abrupt('return', imgBuffer.toString('base64'));

      case 42:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 11], [15, 21], [28, 34]]);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// adb push creates folders and overwrites existing files.

// This screenshoting approach is way faster, since it requires less external commands
// to be executed. Unfortunately, exec-out option is only supported by newer Android/SDK versions (5.0 and later)

// Android bug 8433742 - rotate screenshot if screen is rotated
//# sourceMappingURL=data:application/json;charset=utf8;base64,
