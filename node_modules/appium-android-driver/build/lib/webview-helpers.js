'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var NATIVE_WIN = "NATIVE_APP";
var WEBVIEW_WIN = "WEBVIEW";
var WEBVIEW_BASE = WEBVIEW_WIN + '_';
var WEBVIEW_REGEXP = new RegExp('@?webview_devtools_remote_(\\d+)');
var WEBVIEW_PID_REGEXP = new RegExp(WEBVIEW_BASE + '(\\d+)');
var CHROMIUM_WIN = "CHROMIUM";
var CROSSWALK_SOCKET_SUFFIX = "_devtools_remote";
var CROSSWALK_REGEXP_STRING = '(\\S*)' + CROSSWALK_SOCKET_SUFFIX;
var CROSSWALK_REGEXP = new RegExp('@' + CROSSWALK_REGEXP_STRING);
var CROSSWALK_PROCESS_REGEXP = new RegExp(WEBVIEW_BASE + CROSSWALK_REGEXP_STRING);

var helpers = {};

// This function gets a list of android system processes and returns ones
// that look like webviews, with the appropriate webview prefix and their PID.
// If we pass in a deviceSocket, we only attempt to find webviews which match
// that socket name (this is for apps which embed Chromium, which isn't the
// same as chrome-backed webviews)
// TODO: some of this function belongs in appium-adb
function webviewsFromProcs(adb, deviceSocket) {
  var webviews, out, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, webviewPid, crosswalkWebviewSocket;

  return _regeneratorRuntime.async(function webviewsFromProcs$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        webviews = [];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(adb.shell(["cat", "/proc/net/unix"]));

      case 3:
        out = context$1$0.sent;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 7;
        _iterator = _getIterator(out.split("\n"));

      case 9:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 23;
          break;
        }

        line = _step.value;

        line = line.trim();

        if (!deviceSocket) {
          context$1$0.next = 17;
          break;
        }

        if (!(line.indexOf('@' + deviceSocket) === line.length - deviceSocket.length - 1)) {
          context$1$0.next = 17;
          break;
        }

        if (!(deviceSocket === "chrome_devtools_remote")) {
          context$1$0.next = 17;
          break;
        }

        webviews.push(CHROMIUM_WIN);
        return context$1$0.abrupt('continue', 20);

      case 17:
        webviewPid = undefined;
        crosswalkWebviewSocket = undefined;

        if (webviewPid = line.match(WEBVIEW_REGEXP)) {
          // for multiple webviews a list of 'WEBVIEW_<index>' will be returned
          // where <index> is zero based (same is in selendroid)
          webviews.push('' + WEBVIEW_BASE + webviewPid[1]);
        } else if (crosswalkWebviewSocket = line.match(CROSSWALK_REGEXP)) {
          if (deviceSocket) {
            if (crosswalkWebviewSocket[0].slice(1) === deviceSocket) {
              webviews.push('' + WEBVIEW_BASE + crosswalkWebviewSocket[1]);
            }
          } else {
            webviews.push('' + WEBVIEW_BASE + crosswalkWebviewSocket[1] + CROSSWALK_SOCKET_SUFFIX);
          }
        }

      case 20:
        _iteratorNormalCompletion = true;
        context$1$0.next = 9;
        break;

      case 23:
        context$1$0.next = 29;
        break;

      case 25:
        context$1$0.prev = 25;
        context$1$0.t0 = context$1$0['catch'](7);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 29:
        context$1$0.prev = 29;
        context$1$0.prev = 30;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 32:
        context$1$0.prev = 32;

        if (!_didIteratorError) {
          context$1$0.next = 35;
          break;
        }

        throw _iteratorError;

      case 35:
        return context$1$0.finish(32);

      case 36:
        return context$1$0.finish(29);

      case 37:
        return context$1$0.abrupt('return', _lodash2['default'].uniq(webviews));

      case 38:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 25, 29, 37], [30,, 32, 36]]);
}

// Take a webview name like WEBVIEW_4296 and use 'adb shell ps' to figure out
// which app package is associated with that webview. One of the reasons we
// want to do this is to make sure we're listing webviews for the actual AUT,
// not some other running app
// TODO: this should be called procFromPid and exist in appium-adb
helpers.procFromWebview = function callee$0$0(adb, webview) {
  var processName, pid, out, pkg, lines, fullHeader, header, pidColumn, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, line, entries, pidEntry;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(webview.match(WEBVIEW_PID_REGEXP) === null)) {
          context$1$0.next = 5;
          break;
        }

        processName = webview.match(CROSSWALK_PROCESS_REGEXP);

        if (!(processName === null)) {
          context$1$0.next = 4;
          break;
        }

        throw new Error('Could not find process name for webview ' + webview);

      case 4:
        return context$1$0.abrupt('return', processName[1]);

      case 5:
        pid = webview.match(/\d+$/);

        if (pid) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('Could not find PID for webview ' + webview);

      case 8:
        pid = pid[0];
        _logger2['default'].debug(webview + ' mapped to pid ' + pid);
        _logger2['default'].debug("Getting process name for webview");
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(adb.shell("ps"));

      case 13:
        out = context$1$0.sent;
        pkg = "unknown";
        lines = out.split(/\r?\n/);
        fullHeader = lines[0].trim();
        header = fullHeader.split(/\s+/);
        pidColumn = header.indexOf('PID');
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 22;
        _iterator2 = _getIterator(lines);

      case 24:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 37;
          break;
        }

        line = _step2.value;
        entries = line.trim().split(/\s+/);
        pidEntry = entries[pidColumn];

        if (!(pidEntry === pid)) {
          context$1$0.next = 34;
          break;
        }

        pkg = _lodash2['default'].last(entries);
        _logger2['default'].debug('Parsed pid: \'' + pidEntry + '\' pkg: \'' + pkg + '\' from');
        _logger2['default'].debug('    ' + fullHeader);
        _logger2['default'].debug('    ' + line);

        return context$1$0.abrupt('break', 37);

      case 34:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 24;
        break;

      case 37:
        context$1$0.next = 43;
        break;

      case 39:
        context$1$0.prev = 39;
        context$1$0.t0 = context$1$0['catch'](22);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 43:
        context$1$0.prev = 43;
        context$1$0.prev = 44;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 46:
        context$1$0.prev = 46;

        if (!_didIteratorError2) {
          context$1$0.next = 49;
          break;
        }

        throw _iteratorError2;

      case 49:
        return context$1$0.finish(46);

      case 50:
        return context$1$0.finish(43);

      case 51:

        _logger2['default'].debug('Returning process name: \'' + pkg + '\'');
        return context$1$0.abrupt('return', pkg);

      case 53:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[22, 39, 43, 51], [44,, 46, 50]]);
};

// Get a list of available webviews by introspecting processes with adb, where
// webviews are listed. It's possible to pass in a 'deviceSocket' arg, which
// limits the webview possibilities to the one running on the Chromium devtools
// socket we're interested in (see note on webviewsFromProcs)
helpers.getWebviews = function callee$0$0(adb, deviceSocket) {
  var webviews;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Getting a list of available webviews");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(webviewsFromProcs(adb, deviceSocket));

      case 3:
        webviews = context$1$0.sent;

        if (!deviceSocket) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', webviews);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _asyncbox.asyncmap)(webviews, function callee$1$0(webviewName) {
          var pkg;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(helpers.procFromWebview(adb, webviewName));

              case 2:
                pkg = context$2$0.sent;
                return context$2$0.abrupt('return', WEBVIEW_BASE + pkg);

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 8:
        webviews = context$1$0.sent;

        _logger2['default'].debug('Found webviews: ' + JSON.stringify(webviews));
        return context$1$0.abrupt('return', webviews);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.decorateChromeOptions = function (caps, opts, deviceId) {
  // add options from appium session caps
  if (opts.chromeOptions) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = _getIterator(_lodash2['default'].pairs(opts.chromeOptions)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _step3$value = _slicedToArray(_step3.value, 2);

        var opt = _step3$value[0];
        var val = _step3$value[1];

        if (_lodash2['default'].isUndefined(caps.chromeOptions[opt])) {
          caps.chromeOptions[opt] = val;
        } else {
          _logger2['default'].warn('Cannot pass option ' + caps.chromeOptions[opt] + ' because ' + "Appium needs it to make chromeDriver work");
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  }

  // add device id from adb
  caps.chromeOptions.androidDeviceSerial = deviceId;
  return caps;
};

exports['default'] = helpers;
exports.helpers = helpers;
exports.NATIVE_WIN = NATIVE_WIN;
exports.WEBVIEW_WIN = WEBVIEW_WIN;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
exports.CHROMIUM_WIN = CHROMIUM_WIN;

// webview_devtools_remote_4296 => 4296

/* Output of ps is like:
 USER       PID  PPID  VSIZE  RSS   WCHAN    PC         NAME  _or_
 USER       PID  PPID  VSZ    RSS   WCHAN    ADDR     S NAME
 u0_a136   6248  179   946000 48144 ffffffff 4005903e R com.example.test
 u0_a136   6249  179   946000 48144 ffffffff          R com.example.test
*/
//# sourceMappingURL=data:application/json;charset=utf8;base64,
