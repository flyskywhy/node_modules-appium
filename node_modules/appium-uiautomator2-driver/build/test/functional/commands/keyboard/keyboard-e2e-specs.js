'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncbox = require('asyncbox');

var _desired = require('../../desired');

var _helpersSession = require('../../helpers/session');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var BUTTON_CLASS = 'android.widget.Button';
var EDITTEXT_CLASS = 'android.widget.EditText';
var TEXTVIEW_CLASS = 'android.widget.TextView';

var PACKAGE = 'io.appium.android.apis';
var TEXTFIELD_ACTIVITY = '.view.TextFields';
var KEYEVENT_ACTIVITY = '.text.KeyEventText';

var defaultAsciiCaps = _Object$assign({}, _desired.APIDEMOS_CAPS, {
  newCommandTimeout: 90,
  appPackage: PACKAGE,
  appActivity: TEXTFIELD_ACTIVITY
});

var defaultUnicodeCaps = _Object$assign({}, defaultAsciiCaps, {
  unicodeKeyboard: true,
  resetKeyboard: true
});

function deSamsungify(text) {
  // For samsung S5 text is appended with ". Editing."
  return text.replace(". Editing.", "");
}

function getElement(driver, className) {
  return _regeneratorRuntime.async(function getElement$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, 1000, function callee$1$0() {
          var el;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.t0 = _lodash2['default'];
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(driver.findElOrEls('class name', className, true));

              case 3:
                context$2$0.t1 = context$2$0.sent;
                el = context$2$0.t0.last.call(context$2$0.t0, context$2$0.t1);
                return context$2$0.abrupt('return', el.ELEMENT);

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function runTextEditTest(driver, testText) {
  var keys = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
  var el;
  return _regeneratorRuntime.async(function runTextEditTest$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = _lodash2['default'];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(driver.findElOrEls('class name', EDITTEXT_CLASS, true));

      case 3:
        context$1$0.t1 = context$1$0.sent;
        el = context$1$0.t0.last.call(context$1$0.t0, context$1$0.t1);

        el = el.ELEMENT;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(driver.clear(el));

      case 8:
        if (!keys) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(driver.keys([testText]));

      case 11:
        context$1$0.next = 15;
        break;

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(driver.setValue(testText, el));

      case 15:
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, 1000, function callee$1$0() {
          var text;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(driver.getText(el));

              case 2:
                text = context$2$0.sent;

                deSamsungify(text).should.be.equal(testText);

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        }));

      case 17:
        return context$1$0.abrupt('return', el);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/*
 * The key event page needs to be cleared between runs, or else we get false
 * positives from previously run tests. The page has a single button that
 * removes all text from within the main TextView.
 */
function clearKeyEvents(driver) {
  var el;
  return _regeneratorRuntime.async(function clearKeyEvents$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getElement(driver, BUTTON_CLASS));

      case 2:
        el = context$1$0.sent;

        driver.click(el);

        // wait a moment for the clearing to occur, lest we too quickly try to enter more text
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function keyEventTest(driver, keyCode, metaState, expectedTextArray) {
  var runTest, text, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, expectedText;

  return _regeneratorRuntime.async(function keyEventTest$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        runTest = function runTest() {
          var el;
          return _regeneratorRuntime.async(function runTest$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(driver.pressKeyCode(keyCode, metaState));

              case 2:
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(getElement(driver, TEXTVIEW_CLASS));

              case 4:
                el = context$2$0.sent;
                context$2$0.next = 7;
                return _regeneratorRuntime.awrap(driver.getText(el));

              case 7:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 8:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        };

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(clearKeyEvents(driver));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(runTest());

      case 5:
        text = context$1$0.sent;

        if (text) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(runTest());

      case 9:
        text = context$1$0.sent;

      case 10:
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 13;

        for (_iterator = _getIterator(expectedTextArray); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          expectedText = _step.value;

          text.should.include(expectedText);
        }
        context$1$0.next = 21;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](13);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 21:
        context$1$0.prev = 21;
        context$1$0.prev = 22;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 24:
        context$1$0.prev = 24;

        if (!_didIteratorError) {
          context$1$0.next = 27;
          break;
        }

        throw _iteratorError;

      case 27:
        return context$1$0.finish(24);

      case 28:
        return context$1$0.finish(21);

      case 29:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[13, 17, 21, 29], [22,, 24, 28]]);
}

function runCombinationKeyEventTest(driver) {
  return _regeneratorRuntime.async(function runCombinationKeyEventTest$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(keyEventTest(driver, 29, 193, ['keyCode=KEYCODE_A', 'metaState=META_SHIFT_ON']));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function runKeyEventTest(driver) {
  return _regeneratorRuntime.async(function runKeyEventTest$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(keyEventTest(driver, 82, undefined, ['[keycode=82]', 'keyCode=KEYCODE_MENU']));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var tests = [{ label: 'editing a text field', text: 'Life, the Universe and Everything.' }, { label: 'sending \'&-\'', text: '&-' }, { label: 'sending \'&\' and \'-\' in other text', text: 'In the mid-1990s he ate fish & chips as mayor-elect.' }, { label: 'sending \'-\' in text', text: 'Super-test.' }, { label: 'sending numbers', text: '0123456789' }];

var unicodeTests = [{ label: 'should be able to send \'-\' in unicode text', text: 'परीक्षा-परीक्षण' }, { label: 'should be able to send \'&\' in text', text: 'Fish & chips' }, { label: 'should be able to send \'&\' in unicode text', text: 'Mīna & chips' }, { label: 'should be able to send roman characters with diacritics', text: 'Áé Œ ù ḍ' }, { label: 'should be able to send a \'u\' with an umlaut', text: 'ü' }];

var languageTests = [{ label: 'should be able to send Tamil', text: 'சோதனை' }, { label: 'should be able to send Gujarati', text: 'પરીક્ષણ' }, { label: 'should be able to send Chinese', text: '测试' }, { label: 'should be able to send Russian', text: 'тестирование' }, { label: 'should be able to send Arabic', text: 'تجريب' }, { label: 'should be able to send Hebrew', text: 'בדיקות' }];

describe('keyboard', function () {
  describe('ascii', function () {
    var _this3 = this;

    var driver = undefined;
    before(function callee$2$0() {
      var engines, selectedEngine, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, engine;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(defaultAsciiCaps));

          case 2:
            driver = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.availableIMEEngines());

          case 5:
            engines = context$3$0.sent;
            selectedEngine = _lodash2['default'].first(engines);
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$3$0.prev = 10;

            for (_iterator2 = _getIterator(engines); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              engine = _step2.value;

              // it seems that the latin ime has `android.inputmethod` in its package name
              if (engine.indexOf('android.inputmethod') !== -1) {
                selectedEngine = engine;
              }
            }
            context$3$0.next = 18;
            break;

          case 14:
            context$3$0.prev = 14;
            context$3$0.t0 = context$3$0['catch'](10);
            _didIteratorError2 = true;
            _iteratorError2 = context$3$0.t0;

          case 18:
            context$3$0.prev = 18;
            context$3$0.prev = 19;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 21:
            context$3$0.prev = 21;

            if (!_didIteratorError2) {
              context$3$0.next = 24;
              break;
            }

            throw _iteratorError2;

          case 24:
            return context$3$0.finish(21);

          case 25:
            return context$3$0.finish(18);

          case 26:
            context$3$0.next = 28;
            return _regeneratorRuntime.awrap(driver.activateIMEEngine(selectedEngine));

          case 28:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[10, 14, 18, 26], [19,, 21, 25]]);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.deleteSession());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    describe('editing a text field', function () {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        var _loop = function () {
          var test = _step3.value;

          describe(test.label, function () {
            it('should work with setValue', function callee$5$0() {
              return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                while (1) switch (context$6$0.prev = context$6$0.next) {
                  case 0:
                    context$6$0.next = 2;
                    return _regeneratorRuntime.awrap(runTextEditTest(driver, test.text));

                  case 2:
                  case 'end':
                    return context$6$0.stop();
                }
              }, null, this);
            });
            it('should work with keys', function callee$5$0() {
              return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                while (1) switch (context$6$0.prev = context$6$0.next) {
                  case 0:
                    context$6$0.next = 2;
                    return _regeneratorRuntime.awrap(runTextEditTest(driver, test.text, true));

                  case 2:
                  case 'end':
                    return context$6$0.stop();
                }
              }, null, this);
            });
          });
        };

        for (var _iterator3 = _getIterator(tests), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3['return']) {
            _iterator3['return']();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      it('should be able to clear a password field', function callee$3$0() {
        var els, el;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.findElOrEls('class name', EDITTEXT_CLASS, true));

            case 2:
              els = context$4$0.sent;
              el = els[1].ELEMENT;
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(driver.setValue('super-duper password', el));

            case 6:
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(driver.clear(el));

            case 8:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should be able to type in length-limited field', function callee$3$0() {
        var els, el, text;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.adb.getApiLevel());

            case 2:
              context$4$0.t0 = context$4$0.sent;
              context$4$0.t1 = parseInt(context$4$0.t0, 10);

              if (!(context$4$0.t1 < 24)) {
                context$4$0.next = 6;
                break;
              }

              return context$4$0.abrupt('return', this.skip());

            case 6:
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(driver.findElOrEls('class name', EDITTEXT_CLASS, true));

            case 8:
              els = context$4$0.sent;
              el = els[3].ELEMENT;
              context$4$0.next = 12;
              return _regeneratorRuntime.awrap(driver.setValue('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', el));

            case 12:
              context$4$0.next = 14;
              return _regeneratorRuntime.awrap(driver.getText(el));

            case 14:
              text = context$4$0.sent;

              text.should.eql('0123456789a');

            case 16:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('sending a key event', function () {
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.startActivity(PACKAGE, KEYEVENT_ACTIVITY));

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this3);
      });

      it('should be able to send combination keyevents', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(runCombinationKeyEventTest(driver));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this3);
      });
      it('should be able to send keyevents', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(runKeyEventTest(driver));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this3);
      });
    });
  });

  describe('unicode', function () {
    var _this4 = this;

    var adb = new _appiumAdb2['default']();
    var initialIME = undefined;
    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(adb.defaultIME());

          case 2:
            initialIME = context$3$0.sent;

            initialIME.should.not.eql('io.appium.android.ime/.UnicodeIME');

            context$3$0.next = 6;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(defaultUnicodeCaps));

          case 6:
            driver = context$3$0.sent;

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      var ime;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.deleteSession());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.defaultIME());

          case 4:
            ime = context$3$0.sent;

            ime.should.eql(initialIME);
            ime.should.not.eql('io.appium.android.ime/.UnicodeIME');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    describe('editing a text field', function () {
      var _arr = [tests, unicodeTests, languageTests];

      for (var _i = 0; _i < _arr.length; _i++) {
        var testSet = _arr[_i];var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          var _loop2 = function () {
            var test = _step4.value;

            describe(test.label, function () {
              it('should work with setValue', function callee$5$0() {
                return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                  while (1) switch (context$6$0.prev = context$6$0.next) {
                    case 0:
                      context$6$0.next = 2;
                      return _regeneratorRuntime.awrap(runTextEditTest(driver, test.text));

                    case 2:
                    case 'end':
                      return context$6$0.stop();
                  }
                }, null, this);
              });
              it('should work with keys', function callee$5$0() {
                return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                  while (1) switch (context$6$0.prev = context$6$0.next) {
                    case 0:
                      context$6$0.next = 2;
                      return _regeneratorRuntime.awrap(runTextEditTest(driver, test.text, true));

                    case 2:
                    case 'end':
                      return context$6$0.stop();
                  }
                }, null, this);
              });
            });
          };

          for (var _iterator4 = _getIterator(testSet), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            _loop2();
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    });

    describe('sending a key event', function () {
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.startActivity(PACKAGE, KEYEVENT_ACTIVITY));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this4);
      });

      it('should be able to send combination keyevents', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(runCombinationKeyEventTest(driver));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this4);
      });
      it('should be able to send keyevents', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(runKeyEventTest(driver));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this4);
      });
    });
  });
});

// the test is flakey... try again

// sometimes the default ime is not what we are using

// there is currently no way to assert anything about the contents
// of a password field, since there is no way to access the contents
// but this should, at the very least, not fail

// below Android 7.0 (API level 24) typing too many characters in a
// length-limited field will either throw a NullPointerException or
// crash the app

// expect first 11 characters (limit of the field) to be in the field

// save the initial ime so we can make sure it is restored

// make sure the IME has been restored
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9rZXlib2FyZC9rZXlib2FyZC1lMmUtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztvQkFBaUIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7c0JBQy9CLFFBQVE7Ozs7d0JBQ1IsVUFBVTs7Ozt3QkFDTSxVQUFVOzt1QkFDVixlQUFlOzs4QkFDbEIsdUJBQXVCOzt5QkFDbEMsWUFBWTs7OztBQUc1QixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLElBQU0sWUFBWSxHQUFHLHVCQUF1QixDQUFDO0FBQzdDLElBQU0sY0FBYyxHQUFHLHlCQUF5QixDQUFDO0FBQ2pELElBQU0sY0FBYyxHQUFHLHlCQUF5QixDQUFDOztBQUVqRCxJQUFNLE9BQU8sR0FBRyx3QkFBd0IsQ0FBQztBQUN6QyxJQUFNLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0FBQzlDLElBQU0saUJBQWlCLEdBQUcsb0JBQW9CLENBQUM7O0FBRS9DLElBQUksZ0JBQWdCLEdBQUcsZUFBYyxFQUFFLDBCQUFpQjtBQUN0RCxtQkFBaUIsRUFBRSxFQUFFO0FBQ3JCLFlBQVUsRUFBRSxPQUFPO0FBQ25CLGFBQVcsRUFBRSxrQkFBa0I7Q0FDaEMsQ0FBQyxDQUFDOztBQUVILElBQUksa0JBQWtCLEdBQUcsZUFBYyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUU7QUFDM0QsaUJBQWUsRUFBRSxJQUFJO0FBQ3JCLGVBQWEsRUFBRSxJQUFJO0NBQ3BCLENBQUMsQ0FBQzs7QUFFSCxTQUFTLFlBQVksQ0FBRSxJQUFJLEVBQUU7O0FBRTNCLFNBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDdkM7O0FBRUQsU0FBZSxVQUFVLENBQUUsTUFBTSxFQUFFLFNBQVM7Ozs7Ozs7eUNBQzdCLDZCQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUU7Y0FDL0IsRUFB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QixFQUFFOzs7Ozt1REFDeEIsZUFBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDOzs7Ozs7O2VBQ3pDLENBQUMsQ0FBQztBQUNILGdCQUFFLENBQUMsdUJBQXVCLEVBQUU7Ozs7O3VEQUNwQixlQUFlLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDOzs7Ozs7O2VBQy9DLENBQUMsQ0FBQzthQUNKLENBQUMsQ0FBQzs7O0FBUkwsNkNBQWlCLE9BQU8saUhBQUU7O1dBU3pCOzs7Ozs7Ozs7Ozs7Ozs7T0FDRjtLQUNGLENBQUMsQ0FBQzs7QUFFSCxZQUFRLENBQUMscUJBQXFCLEVBQUUsWUFBTTtBQUNwQyxZQUFNLENBQUM7Ozs7OytDQUNDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDOzs7Ozs7O09BQ3ZELENBQUMsQ0FBQzs7QUFFSCxRQUFFLENBQUMsOENBQThDLEVBQUU7Ozs7OytDQUMzQywwQkFBMEIsQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7T0FDekMsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLGtDQUFrQyxFQUFFOzs7OzsrQ0FDL0IsZUFBZSxDQUFDLE1BQU0sQ0FBQzs7Ozs7OztPQUM5QixDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2NvbW1hbmRzL2tleWJvYXJkL2tleWJvYXJkLWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBBUElERU1PU19DQVBTIH0gZnJvbSAnLi4vLi4vZGVzaXJlZCc7XG5pbXBvcnQgeyBpbml0RHJpdmVyIH0gZnJvbSAnLi4vLi4vaGVscGVycy9zZXNzaW9uJztcbmltcG9ydCBBREIgZnJvbSAnYXBwaXVtLWFkYic7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuY29uc3QgQlVUVE9OX0NMQVNTID0gJ2FuZHJvaWQud2lkZ2V0LkJ1dHRvbic7XG5jb25zdCBFRElUVEVYVF9DTEFTUyA9ICdhbmRyb2lkLndpZGdldC5FZGl0VGV4dCc7XG5jb25zdCBURVhUVklFV19DTEFTUyA9ICdhbmRyb2lkLndpZGdldC5UZXh0Vmlldyc7XG5cbmNvbnN0IFBBQ0tBR0UgPSAnaW8uYXBwaXVtLmFuZHJvaWQuYXBpcyc7XG5jb25zdCBURVhURklFTERfQUNUSVZJVFkgPSAnLnZpZXcuVGV4dEZpZWxkcyc7XG5jb25zdCBLRVlFVkVOVF9BQ1RJVklUWSA9ICcudGV4dC5LZXlFdmVudFRleHQnO1xuXG5sZXQgZGVmYXVsdEFzY2lpQ2FwcyA9IE9iamVjdC5hc3NpZ24oe30sIEFQSURFTU9TX0NBUFMsIHtcbiAgbmV3Q29tbWFuZFRpbWVvdXQ6IDkwLFxuICBhcHBQYWNrYWdlOiBQQUNLQUdFLFxuICBhcHBBY3Rpdml0eTogVEVYVEZJRUxEX0FDVElWSVRZXG59KTtcblxubGV0IGRlZmF1bHRVbmljb2RlQ2FwcyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRBc2NpaUNhcHMsIHtcbiAgdW5pY29kZUtleWJvYXJkOiB0cnVlLFxuICByZXNldEtleWJvYXJkOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gZGVTYW1zdW5naWZ5ICh0ZXh0KSB7XG4gIC8vIEZvciBzYW1zdW5nIFM1IHRleHQgaXMgYXBwZW5kZWQgd2l0aCBcIi4gRWRpdGluZy5cIlxuICByZXR1cm4gdGV4dC5yZXBsYWNlKFwiLiBFZGl0aW5nLlwiLCBcIlwiKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RWxlbWVudCAoZHJpdmVyLCBjbGFzc05hbWUpIHtcbiAgcmV0dXJuIGF3YWl0IHJldHJ5SW50ZXJ2YWwoMTAsIDEwMDAsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgZWwgPSBfLmxhc3QoYXdhaXQgZHJpdmVyLmZpbmRFbE9yRWxzKCdjbGFzcyBuYW1lJywgY2xhc3NOYW1lLCB0cnVlKSk7XG4gICAgcmV0dXJuIGVsLkVMRU1FTlQ7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBydW5UZXh0RWRpdFRlc3QgKGRyaXZlciwgdGVzdFRleHQsIGtleXMgPSBmYWxzZSkge1xuICBsZXQgZWwgPSBfLmxhc3QoYXdhaXQgZHJpdmVyLmZpbmRFbE9yRWxzKCdjbGFzcyBuYW1lJywgRURJVFRFWFRfQ0xBU1MsIHRydWUpKTtcbiAgZWwgPSBlbC5FTEVNRU5UO1xuICBhd2FpdCBkcml2ZXIuY2xlYXIoZWwpO1xuXG4gIGlmIChrZXlzKSB7XG4gICAgYXdhaXQgZHJpdmVyLmtleXMoW3Rlc3RUZXh0XSk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgZHJpdmVyLnNldFZhbHVlKHRlc3RUZXh0LCBlbCk7XG4gIH1cblxuICBhd2FpdCByZXRyeUludGVydmFsKDEwLCAxMDAwLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHRleHQgPSBhd2FpdCBkcml2ZXIuZ2V0VGV4dChlbCk7XG4gICAgZGVTYW1zdW5naWZ5KHRleHQpLnNob3VsZC5iZS5lcXVhbCh0ZXN0VGV4dCk7XG4gIH0pO1xuXG4gIHJldHVybiBlbDtcbn1cblxuLypcbiAqIFRoZSBrZXkgZXZlbnQgcGFnZSBuZWVkcyB0byBiZSBjbGVhcmVkIGJldHdlZW4gcnVucywgb3IgZWxzZSB3ZSBnZXQgZmFsc2VcbiAqIHBvc2l0aXZlcyBmcm9tIHByZXZpb3VzbHkgcnVuIHRlc3RzLiBUaGUgcGFnZSBoYXMgYSBzaW5nbGUgYnV0dG9uIHRoYXRcbiAqIHJlbW92ZXMgYWxsIHRleHQgZnJvbSB3aXRoaW4gdGhlIG1haW4gVGV4dFZpZXcuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNsZWFyS2V5RXZlbnRzIChkcml2ZXIpIHtcbiAgbGV0IGVsID0gYXdhaXQgZ2V0RWxlbWVudChkcml2ZXIsIEJVVFRPTl9DTEFTUyk7XG4gIGRyaXZlci5jbGljayhlbCk7XG5cbiAgLy8gd2FpdCBhIG1vbWVudCBmb3IgdGhlIGNsZWFyaW5nIHRvIG9jY3VyLCBsZXN0IHdlIHRvbyBxdWlja2x5IHRyeSB0byBlbnRlciBtb3JlIHRleHRcbiAgYXdhaXQgQi5kZWxheSg1MDApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBrZXlFdmVudFRlc3QgKGRyaXZlciwga2V5Q29kZSwgbWV0YVN0YXRlLCBleHBlY3RlZFRleHRBcnJheSkge1xuICBsZXQgcnVuVGVzdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBkcml2ZXIucHJlc3NLZXlDb2RlKGtleUNvZGUsIG1ldGFTdGF0ZSk7XG4gICAgbGV0IGVsID0gYXdhaXQgZ2V0RWxlbWVudChkcml2ZXIsIFRFWFRWSUVXX0NMQVNTKTtcbiAgICByZXR1cm4gYXdhaXQgZHJpdmVyLmdldFRleHQoZWwpO1xuICB9O1xuXG4gIGF3YWl0IGNsZWFyS2V5RXZlbnRzKGRyaXZlcik7XG5cbiAgbGV0IHRleHQgPSBhd2FpdCBydW5UZXN0KCk7XG4gIGlmICghdGV4dCkge1xuICAgIC8vIHRoZSB0ZXN0IGlzIGZsYWtleS4uLiB0cnkgYWdhaW5cbiAgICB0ZXh0ID0gYXdhaXQgcnVuVGVzdCgpO1xuICB9XG4gIGZvciAobGV0IGV4cGVjdGVkVGV4dCBvZiBleHBlY3RlZFRleHRBcnJheSkge1xuICAgIHRleHQuc2hvdWxkLmluY2x1ZGUoZXhwZWN0ZWRUZXh0KTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBydW5Db21iaW5hdGlvbktleUV2ZW50VGVzdCAoZHJpdmVyKSB7XG4gIGF3YWl0IGtleUV2ZW50VGVzdChkcml2ZXIsIDI5LCAxOTMsIFsna2V5Q29kZT1LRVlDT0RFX0EnLCAnbWV0YVN0YXRlPU1FVEFfU0hJRlRfT04nXSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bktleUV2ZW50VGVzdCAoZHJpdmVyKSB7XG4gIGF3YWl0IGtleUV2ZW50VGVzdChkcml2ZXIsIDgyLCB1bmRlZmluZWQsIFsnW2tleWNvZGU9ODJdJywgJ2tleUNvZGU9S0VZQ09ERV9NRU5VJ10pO1xufVxuXG5sZXQgdGVzdHMgPSBbXG4gIHsgbGFiZWw6ICdlZGl0aW5nIGEgdGV4dCBmaWVsZCcsIHRleHQ6ICdMaWZlLCB0aGUgVW5pdmVyc2UgYW5kIEV2ZXJ5dGhpbmcuJyB9LFxuICB7IGxhYmVsOiAnc2VuZGluZyBcXCcmLVxcJycsIHRleHQ6ICcmLScgfSxcbiAgeyBsYWJlbDogJ3NlbmRpbmcgXFwnJlxcJyBhbmQgXFwnLVxcJyBpbiBvdGhlciB0ZXh0JywgdGV4dDogJ0luIHRoZSBtaWQtMTk5MHMgaGUgYXRlIGZpc2ggJiBjaGlwcyBhcyBtYXlvci1lbGVjdC4nIH0sXG4gIHsgbGFiZWw6ICdzZW5kaW5nIFxcJy1cXCcgaW4gdGV4dCcsIHRleHQ6ICdTdXBlci10ZXN0LicgfSxcbiAgeyBsYWJlbDogJ3NlbmRpbmcgbnVtYmVycycsIHRleHQ6ICcwMTIzNDU2Nzg5J30sXG5dO1xuXG5sZXQgdW5pY29kZVRlc3RzID0gW1xuICB7IGxhYmVsOiAnc2hvdWxkIGJlIGFibGUgdG8gc2VuZCBcXCctXFwnIGluIHVuaWNvZGUgdGV4dCcsIHRleHQ6ICfgpKrgpLDgpYDgpJXgpY3gpLfgpL4t4KSq4KSw4KWA4KSV4KWN4KS34KSjJyB9LFxuICB7IGxhYmVsOiAnc2hvdWxkIGJlIGFibGUgdG8gc2VuZCBcXCcmXFwnIGluIHRleHQnLCB0ZXh0OiAnRmlzaCAmIGNoaXBzJyB9LFxuICB7IGxhYmVsOiAnc2hvdWxkIGJlIGFibGUgdG8gc2VuZCBcXCcmXFwnIGluIHVuaWNvZGUgdGV4dCcsIHRleHQ6ICdNxKtuYSAmIGNoaXBzJyB9LFxuICB7IGxhYmVsOiAnc2hvdWxkIGJlIGFibGUgdG8gc2VuZCByb21hbiBjaGFyYWN0ZXJzIHdpdGggZGlhY3JpdGljcycsIHRleHQ6ICfDgcOpIMWSIMO5IOG4jScgfSxcbiAgeyBsYWJlbDogJ3Nob3VsZCBiZSBhYmxlIHRvIHNlbmQgYSBcXCd1XFwnIHdpdGggYW4gdW1sYXV0JywgdGV4dDogJ8O8JyB9LFxuXTtcblxubGV0IGxhbmd1YWdlVGVzdHMgPSBbXG4gIHsgbGFiZWw6ICdzaG91bGQgYmUgYWJsZSB0byBzZW5kIFRhbWlsJywgdGV4dDogJ+CumuCvh+CuvuCupOCuqeCviCcgfSxcbiAgeyBsYWJlbDogJ3Nob3VsZCBiZSBhYmxlIHRvIHNlbmQgR3VqYXJhdGknLCB0ZXh0OiAn4Kqq4Kqw4KuA4KqV4KuN4Kq34KqjJyB9LFxuICB7IGxhYmVsOiAnc2hvdWxkIGJlIGFibGUgdG8gc2VuZCBDaGluZXNlJywgdGV4dDogJ+a1i+ivlScgfSxcbiAgeyBsYWJlbDogJ3Nob3VsZCBiZSBhYmxlIHRvIHNlbmQgUnVzc2lhbicsIHRleHQ6ICfRgtC10YHRgtC40YDQvtCy0LDQvdC40LUnIH0sXG4gIHsgbGFiZWw6ICdzaG91bGQgYmUgYWJsZSB0byBzZW5kIEFyYWJpYycsIHRleHQ6ICfYqtis2LHZitioJyB9LFxuICB7IGxhYmVsOiAnc2hvdWxkIGJlIGFibGUgdG8gc2VuZCBIZWJyZXcnLCB0ZXh0OiAn15HXk9eZ16fXldeqJyB9LFxuXTtcblxuZGVzY3JpYmUoJ2tleWJvYXJkJywgZnVuY3Rpb24gKCkge1xuICBkZXNjcmliZSgnYXNjaWknLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGRyaXZlcjtcbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyID0gYXdhaXQgaW5pdERyaXZlcihkZWZhdWx0QXNjaWlDYXBzKTtcblxuICAgICAgLy8gc29tZXRpbWVzIHRoZSBkZWZhdWx0IGltZSBpcyBub3Qgd2hhdCB3ZSBhcmUgdXNpbmdcbiAgICAgIGxldCBlbmdpbmVzID0gYXdhaXQgZHJpdmVyLmF2YWlsYWJsZUlNRUVuZ2luZXMoKTtcbiAgICAgIGxldCBzZWxlY3RlZEVuZ2luZSA9IF8uZmlyc3QoZW5naW5lcyk7XG4gICAgICBmb3IgKGxldCBlbmdpbmUgb2YgZW5naW5lcykge1xuICAgICAgICAvLyBpdCBzZWVtcyB0aGF0IHRoZSBsYXRpbiBpbWUgaGFzIGBhbmRyb2lkLmlucHV0bWV0aG9kYCBpbiBpdHMgcGFja2FnZSBuYW1lXG4gICAgICAgIGlmIChlbmdpbmUuaW5kZXhPZignYW5kcm9pZC5pbnB1dG1ldGhvZCcpICE9PSAtMSkge1xuICAgICAgICAgIHNlbGVjdGVkRW5naW5lID0gZW5naW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhd2FpdCBkcml2ZXIuYWN0aXZhdGVJTUVFbmdpbmUoc2VsZWN0ZWRFbmdpbmUpO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGRyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgfSk7XG5cblxuICAgIGRlc2NyaWJlKCdlZGl0aW5nIGEgdGV4dCBmaWVsZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAobGV0IHRlc3Qgb2YgdGVzdHMpIHtcbiAgICAgICAgZGVzY3JpYmUodGVzdC5sYWJlbCwgKCkgPT4ge1xuICAgICAgICAgIGl0KCdzaG91bGQgd29yayB3aXRoIHNldFZhbHVlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXdhaXQgcnVuVGV4dEVkaXRUZXN0KGRyaXZlciwgdGVzdC50ZXh0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpdCgnc2hvdWxkIHdvcmsgd2l0aCBrZXlzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXdhaXQgcnVuVGV4dEVkaXRUZXN0KGRyaXZlciwgdGVzdC50ZXh0LCB0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBjbGVhciBhIHBhc3N3b3JkIGZpZWxkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBjdXJyZW50bHkgbm8gd2F5IHRvIGFzc2VydCBhbnl0aGluZyBhYm91dCB0aGUgY29udGVudHNcbiAgICAgICAgLy8gb2YgYSBwYXNzd29yZCBmaWVsZCwgc2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIGFjY2VzcyB0aGUgY29udGVudHNcbiAgICAgICAgLy8gYnV0IHRoaXMgc2hvdWxkLCBhdCB0aGUgdmVyeSBsZWFzdCwgbm90IGZhaWxcbiAgICAgICAgbGV0IGVscyA9IGF3YWl0IGRyaXZlci5maW5kRWxPckVscygnY2xhc3MgbmFtZScsIEVESVRURVhUX0NMQVNTLCB0cnVlKTtcbiAgICAgICAgbGV0IGVsID0gZWxzWzFdLkVMRU1FTlQ7XG5cbiAgICAgICAgYXdhaXQgZHJpdmVyLnNldFZhbHVlKCdzdXBlci1kdXBlciBwYXNzd29yZCcsIGVsKTtcbiAgICAgICAgYXdhaXQgZHJpdmVyLmNsZWFyKGVsKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gdHlwZSBpbiBsZW5ndGgtbGltaXRlZCBmaWVsZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHBhcnNlSW50KGF3YWl0IGRyaXZlci5hZGIuZ2V0QXBpTGV2ZWwoKSwgMTApIDwgMjQpIHtcbiAgICAgICAgICAvLyBiZWxvdyBBbmRyb2lkIDcuMCAoQVBJIGxldmVsIDI0KSB0eXBpbmcgdG9vIG1hbnkgY2hhcmFjdGVycyBpbiBhXG4gICAgICAgICAgLy8gbGVuZ3RoLWxpbWl0ZWQgZmllbGQgd2lsbCBlaXRoZXIgdGhyb3cgYSBOdWxsUG9pbnRlckV4Y2VwdGlvbiBvclxuICAgICAgICAgIC8vIGNyYXNoIHRoZSBhcHBcbiAgICAgICAgICByZXR1cm4gdGhpcy5za2lwKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVscyA9IGF3YWl0IGRyaXZlci5maW5kRWxPckVscygnY2xhc3MgbmFtZScsIEVESVRURVhUX0NMQVNTLCB0cnVlKTtcbiAgICAgICAgbGV0IGVsID0gZWxzWzNdLkVMRU1FTlQ7XG4gICAgICAgIGF3YWl0IGRyaXZlci5zZXRWYWx1ZSgnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonLCBlbCk7XG5cbiAgICAgICAgLy8gZXhwZWN0IGZpcnN0IDExIGNoYXJhY3RlcnMgKGxpbWl0IG9mIHRoZSBmaWVsZCkgdG8gYmUgaW4gdGhlIGZpZWxkXG4gICAgICAgIGxldCB0ZXh0ID0gYXdhaXQgZHJpdmVyLmdldFRleHQoZWwpO1xuICAgICAgICB0ZXh0LnNob3VsZC5lcWwoJzAxMjM0NTY3ODlhJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdzZW5kaW5nIGEga2V5IGV2ZW50JywgKCkgPT4ge1xuICAgICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZHJpdmVyLnN0YXJ0QWN0aXZpdHkoUEFDS0FHRSwgS0VZRVZFTlRfQUNUSVZJVFkpO1xuICAgICAgICBhd2FpdCBCLmRlbGF5KDUwMCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIHNlbmQgY29tYmluYXRpb24ga2V5ZXZlbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBydW5Db21iaW5hdGlvbktleUV2ZW50VGVzdChkcml2ZXIpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gc2VuZCBrZXlldmVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJ1bktleUV2ZW50VGVzdChkcml2ZXIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd1bmljb2RlJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBhZGIgPSBuZXcgQURCKCk7XG4gICAgbGV0IGluaXRpYWxJTUU7XG4gICAgbGV0IGRyaXZlcjtcbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc2F2ZSB0aGUgaW5pdGlhbCBpbWUgc28gd2UgY2FuIG1ha2Ugc3VyZSBpdCBpcyByZXN0b3JlZFxuICAgICAgaW5pdGlhbElNRSA9IGF3YWl0IGFkYi5kZWZhdWx0SU1FKCk7XG4gICAgICBpbml0aWFsSU1FLnNob3VsZC5ub3QuZXFsKCdpby5hcHBpdW0uYW5kcm9pZC5pbWUvLlVuaWNvZGVJTUUnKTtcblxuICAgICAgZHJpdmVyID0gYXdhaXQgaW5pdERyaXZlcihkZWZhdWx0VW5pY29kZUNhcHMpO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGRyaXZlci5kZWxldGVTZXNzaW9uKCk7XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgSU1FIGhhcyBiZWVuIHJlc3RvcmVkXG4gICAgICBsZXQgaW1lID0gYXdhaXQgYWRiLmRlZmF1bHRJTUUoKTtcbiAgICAgIGltZS5zaG91bGQuZXFsKGluaXRpYWxJTUUpO1xuICAgICAgaW1lLnNob3VsZC5ub3QuZXFsKCdpby5hcHBpdW0uYW5kcm9pZC5pbWUvLlVuaWNvZGVJTUUnKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdlZGl0aW5nIGEgdGV4dCBmaWVsZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAobGV0IHRlc3RTZXQgb2YgW3Rlc3RzLCB1bmljb2RlVGVzdHMsIGxhbmd1YWdlVGVzdHNdKSB7XG4gICAgICAgIGZvciAobGV0IHRlc3Qgb2YgdGVzdFNldCkge1xuICAgICAgICAgIGRlc2NyaWJlKHRlc3QubGFiZWwsICgpID0+IHtcbiAgICAgICAgICAgIGl0KCdzaG91bGQgd29yayB3aXRoIHNldFZhbHVlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBhd2FpdCBydW5UZXh0RWRpdFRlc3QoZHJpdmVyLCB0ZXN0LnRleHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpdCgnc2hvdWxkIHdvcmsgd2l0aCBrZXlzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBhd2FpdCBydW5UZXh0RWRpdFRlc3QoZHJpdmVyLCB0ZXN0LnRleHQsIHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdzZW5kaW5nIGEga2V5IGV2ZW50JywgKCkgPT4ge1xuICAgICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZHJpdmVyLnN0YXJ0QWN0aXZpdHkoUEFDS0FHRSwgS0VZRVZFTlRfQUNUSVZJVFkpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBzZW5kIGNvbWJpbmF0aW9uIGtleWV2ZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcnVuQ29tYmluYXRpb25LZXlFdmVudFRlc3QoZHJpdmVyKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIHNlbmQga2V5ZXZlbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBydW5LZXlFdmVudFRlc3QoZHJpdmVyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi8uLiJ9
