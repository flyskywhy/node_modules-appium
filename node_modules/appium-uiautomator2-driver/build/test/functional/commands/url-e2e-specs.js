'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _desired = require('../desired');

var _ = require('../../..');

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var driver = undefined;
var caps = _Object$assign({}, _desired.BROWSER_CAPS);

describe('setUrl @skip-ci', function () {
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _.startServer)());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_wd2['default'].promiseChainRemote('localhost', 4884));

        case 4:
          driver = context$2$0.sent;

          caps.browserName = 'Chrome';

          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(driver.init(caps));

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should be able to start a data uri via setUrl', function callee$1$0() {
    var btn, el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!(caps.browserName === 'Chrome')) {
            context$2$0.next = 16;
            break;
          }

          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.elementById('id', 'com.android.chrome:id/terms_accept'));

        case 4:
          btn = context$2$0.sent;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(btn.click());

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.elementById('id', 'com.android.chrome:id/negative_button'));

        case 9:
          btn = context$2$0.sent;
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(btn.click());

        case 12:
          context$2$0.next = 16;
          break;

        case 14:
          context$2$0.prev = 14;
          context$2$0.t0 = context$2$0['catch'](1);

        case 16:
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap(driver.get('http://saucelabs.com'));

        case 18:
          context$2$0.next = 20;
          return _regeneratorRuntime.awrap(driver.waitForElementByTagName("title"));

        case 20:
          context$2$0.next = 22;
          return _regeneratorRuntime.awrap(driver.elementByTagName("title"));

        case 22:
          el = context$2$0.sent;
          context$2$0.next = 25;
          return _regeneratorRuntime.awrap(el.getAttribute("innerHTML").should.eventually.include('Sauce Labs'));

        case 25:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[1, 14]]);
  });
});

// on some chrome systems, we always get the terms and conditions page
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy91cmwtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7Ozt1QkFDaEIsWUFBWTs7Z0JBQ2IsVUFBVTs7a0JBQ3ZCLElBQUk7Ozs7QUFHbkIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixJQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsSUFBSSxJQUFJLEdBQUcsZUFBYyxFQUFFLHdCQUFlLENBQUM7O0FBRTNDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZO0FBQ3RDLFFBQU0sQ0FBQzs7Ozs7MkNBQ0Msb0JBQWE7Ozs7MkNBQ0osZ0JBQUcsa0JBQWtCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQzs7O0FBQXZELGdCQUFNOztBQUNOLGNBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDOzs7MkNBRXRCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0dBQ3hCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsK0NBQStDLEVBQUU7UUFJMUMsR0FBRyxFQVdQLEVBQUU7Ozs7Z0JBZEYsSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRLENBQUE7Ozs7Ozs7MkNBR2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsb0NBQW9DLENBQUM7OztBQUExRSxhQUFHOzsyQ0FDRCxHQUFHLENBQUMsS0FBSyxFQUFFOzs7OzJDQUVMLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHVDQUF1QyxDQUFDOzs7QUFBN0UsYUFBRzs7MkNBQ0csR0FBRyxDQUFDLEtBQUssRUFBRTs7Ozs7Ozs7Ozs7OzJDQUlmLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7Ozs7MkNBRWxDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUM7Ozs7MkNBQzlCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7OztBQUEzQyxZQUFFOzsyQ0FDQSxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQzs7Ozs7OztHQUMzRSxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2NvbW1hbmRzL3VybC1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IEJST1dTRVJfQ0FQUyB9IGZyb20gJy4uL2Rlc2lyZWQnO1xuaW1wb3J0IHsgc3RhcnRTZXJ2ZXIgfSBmcm9tICcuLi8uLi8uLic7XG5pbXBvcnQgd2QgZnJvbSAnd2QnO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmxldCBkcml2ZXI7XG5sZXQgY2FwcyA9IE9iamVjdC5hc3NpZ24oe30sIEJST1dTRVJfQ0FQUyk7XG5cbmRlc2NyaWJlKCdzZXRVcmwgQHNraXAtY2knLCBmdW5jdGlvbiAoKSB7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYXdhaXQgc3RhcnRTZXJ2ZXIoKTtcbiAgICBkcml2ZXIgPSBhd2FpdCB3ZC5wcm9taXNlQ2hhaW5SZW1vdGUoJ2xvY2FsaG9zdCcsIDQ4ODQpO1xuICAgIGNhcHMuYnJvd3Nlck5hbWUgPSAnQ2hyb21lJztcblxuICAgIGF3YWl0IGRyaXZlci5pbml0KGNhcHMpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gc3RhcnQgYSBkYXRhIHVyaSB2aWEgc2V0VXJsJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYXBzLmJyb3dzZXJOYW1lID09PSAnQ2hyb21lJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gb24gc29tZSBjaHJvbWUgc3lzdGVtcywgd2UgYWx3YXlzIGdldCB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgcGFnZVxuICAgICAgICBsZXQgYnRuID0gYXdhaXQgZHJpdmVyLmVsZW1lbnRCeUlkKCdpZCcsICdjb20uYW5kcm9pZC5jaHJvbWU6aWQvdGVybXNfYWNjZXB0Jyk7XG4gICAgICAgIGF3YWl0IGJ0bi5jbGljaygpO1xuXG4gICAgICAgIGJ0biA9IGF3YWl0IGRyaXZlci5lbGVtZW50QnlJZCgnaWQnLCAnY29tLmFuZHJvaWQuY2hyb21lOmlkL25lZ2F0aXZlX2J1dHRvbicpO1xuICAgICAgICBhd2FpdCBidG4uY2xpY2soKTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICB9XG5cbiAgICBhd2FpdCBkcml2ZXIuZ2V0KCdodHRwOi8vc2F1Y2VsYWJzLmNvbScpO1xuXG4gICAgYXdhaXQgZHJpdmVyLndhaXRGb3JFbGVtZW50QnlUYWdOYW1lKFwidGl0bGVcIik7XG4gICAgbGV0IGVsID0gYXdhaXQgZHJpdmVyLmVsZW1lbnRCeVRhZ05hbWUoXCJ0aXRsZVwiKTtcbiAgICBhd2FpdCBlbC5nZXRBdHRyaWJ1dGUoXCJpbm5lckhUTUxcIikuc2hvdWxkLmV2ZW50dWFsbHkuaW5jbHVkZSgnU2F1Y2UgTGFicycpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
