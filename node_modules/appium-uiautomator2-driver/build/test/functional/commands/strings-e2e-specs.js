'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _desired = require('../desired');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _helpersSession = require('../helpers/session');

var _helpersHelpers = require('../helpers/helpers');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumAndroidDriver = require('appium-android-driver');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('strings', function () {
  var driver = undefined;

  describe('specific language', function () {
    var _this = this;

    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_desired.APIDEMOS_CAPS));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.deleteSession());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return app strings', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getStrings('en'));

          case 2:
            strings = context$3$0.sent;

            strings.hello_world.should.equal('<b>Hello, <i>World!</i></b>');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return app strings for different language', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getStrings('fr'));

          case 2:
            strings = context$3$0.sent;

            strings.hello_world.should.equal('<b>Bonjour, <i>Monde!</i></b>');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('device language', function () {
    var initialLocale = undefined;
    before(function callee$2$0() {
      var adb;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb = new _appiumAdb2['default']();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getApiLevel());

          case 3:
            context$3$0.t0 = context$3$0.sent;

            if (!(context$3$0.t0 > 23)) {
              context$3$0.next = 6;
              break;
            }

            return context$3$0.abrupt('return', this.skip());

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap((0, _helpersHelpers.getLocale)(adb));

          case 8:
            initialLocale = context$3$0.sent;

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            if (!driver) {
              context$3$0.next = 5;
              break;
            }

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumAndroidDriver.androidHelpers.ensureDeviceLocale(driver.adb, null, initialLocale));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.deleteSession());

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return app strings with default locale/language', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_desired.APIDEMOS_CAPS));

          case 2:
            driver = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getStrings());

          case 5:
            strings = context$3$0.sent;

            strings.hello_world.should.equal('<b>Hello, <i>World!</i></b>');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return app strings when language/locale set @skip-ci', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_lodash2['default'].defaults({
              language: 'fr',
              locale: 'CA'
            }, _desired.APIDEMOS_CAPS)));

          case 2:
            driver = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getStrings());

          case 5:
            strings = context$3$0.sent;

            strings.hello_world.should.equal('<b>Bonjour, <i>Monde!</i></b>');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});

// restarting doesn't work on Android 7+
//eslint-disable-line curly
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9zdHJpbmdzLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3VCQUNmLFlBQVk7O3lCQUMxQixZQUFZOzs7OzhCQUNELG9CQUFvQjs7OEJBQ3JCLG9CQUFvQjs7c0JBQ2hDLFFBQVE7Ozs7bUNBQ1MsdUJBQXVCOztBQUd0RCxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBWTtBQUM5QixNQUFJLE1BQU0sWUFBQSxDQUFDOztBQUVYLFVBQVEsQ0FBQyxtQkFBbUIsRUFBRSxZQUFZOzs7QUFDeEMsVUFBTSxDQUFDOzs7Ozs2Q0FDVSx1REFBeUI7OztBQUF4QyxrQkFBTTs7Ozs7OztLQUNQLENBQUMsQ0FBQztBQUNILFNBQUssQ0FBQzs7Ozs7NkNBQ0UsTUFBTSxDQUFDLGFBQWEsRUFBRTs7Ozs7OztLQUM3QixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLDJCQUEyQixFQUFFO1VBQzFCLE9BQU87Ozs7OzZDQUFTLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDOzs7QUFBdkMsbUJBQU87O0FBQ1gsbUJBQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDOzs7Ozs7O0tBQ2pFLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsa0RBQWtELEVBQUU7VUFDakQsT0FBTzs7Ozs7NkNBQVMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7OztBQUF2QyxtQkFBTzs7QUFDWCxtQkFBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7Ozs7Ozs7S0FDbkUsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZO0FBQ3RDLFFBQUksYUFBYSxZQUFBLENBQUM7QUFDbEIsVUFBTSxDQUFDO1VBRUQsR0FBRzs7OztBQUFILGVBQUcsR0FBRyw0QkFBUzs7NkNBQ1QsR0FBRyxDQUFDLFdBQVcsRUFBRTs7Ozs7bUNBQUcsRUFBRTs7Ozs7Z0RBQVMsSUFBSSxDQUFDLElBQUksRUFBRTs7Ozs2Q0FFOUIsK0JBQVUsR0FBRyxDQUFDOzs7QUFBcEMseUJBQWE7Ozs7Ozs7S0FDZCxDQUFDLENBQUM7QUFDSCxhQUFTLENBQUM7Ozs7aUJBQ0osTUFBTTs7Ozs7OzZDQUNGLG9DQUFlLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQzs7Ozs2Q0FFbEUsTUFBTSxDQUFDLGFBQWEsRUFBRTs7Ozs7OztLQUUvQixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHdEQUF3RCxFQUFFO1VBR3ZELE9BQU87Ozs7OzZDQUZJLHVEQUF5Qjs7O0FBQXhDLGtCQUFNOzs2Q0FFYyxNQUFNLENBQUMsVUFBVSxFQUFFOzs7QUFBbkMsbUJBQU87O0FBQ1gsbUJBQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDOzs7Ozs7O0tBQ2pFLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyw2REFBNkQsRUFBRTtVQU01RCxPQUFPOzs7Ozs2Q0FMSSxnQ0FBVyxvQkFBRSxRQUFRLENBQUM7QUFDbkMsc0JBQVEsRUFBRSxJQUFJO0FBQ2Qsb0JBQU0sRUFBRSxJQUFJO2FBQ2IseUJBQWdCLENBQUM7OztBQUhsQixrQkFBTTs7NkNBS2MsTUFBTSxDQUFDLFVBQVUsRUFBRTs7O0FBQW5DLG1CQUFPOztBQUNYLG1CQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQzs7Ozs7OztLQUNuRSxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2NvbW1hbmRzL3N0cmluZ3MtZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgeyBBUElERU1PU19DQVBTIH0gZnJvbSAnLi4vZGVzaXJlZCc7XG5pbXBvcnQgQURCIGZyb20gJ2FwcGl1bS1hZGInO1xuaW1wb3J0IHsgaW5pdERyaXZlciB9IGZyb20gJy4uL2hlbHBlcnMvc2Vzc2lvbic7XG5pbXBvcnQgeyBnZXRMb2NhbGUgfSBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGFuZHJvaWRIZWxwZXJzIH0gZnJvbSAnYXBwaXVtLWFuZHJvaWQtZHJpdmVyJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnc3RyaW5ncycsIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGRyaXZlcjtcblxuICBkZXNjcmliZSgnc3BlY2lmaWMgbGFuZ3VhZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgIGRyaXZlciA9IGF3YWl0IGluaXREcml2ZXIoQVBJREVNT1NfQ0FQUyk7XG4gICAgfSk7XG4gICAgYWZ0ZXIoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGFwcCBzdHJpbmdzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHN0cmluZ3MgPSBhd2FpdCBkcml2ZXIuZ2V0U3RyaW5ncygnZW4nKTtcbiAgICAgIHN0cmluZ3MuaGVsbG9fd29ybGQuc2hvdWxkLmVxdWFsKCc8Yj5IZWxsbywgPGk+V29ybGQhPC9pPjwvYj4nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGFwcCBzdHJpbmdzIGZvciBkaWZmZXJlbnQgbGFuZ3VhZ2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc3RyaW5ncyA9IGF3YWl0IGRyaXZlci5nZXRTdHJpbmdzKCdmcicpO1xuICAgICAgc3RyaW5ncy5oZWxsb193b3JsZC5zaG91bGQuZXF1YWwoJzxiPkJvbmpvdXIsIDxpPk1vbmRlITwvaT48L2I+Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdkZXZpY2UgbGFuZ3VhZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGluaXRpYWxMb2NhbGU7XG4gICAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHJlc3RhcnRpbmcgZG9lc24ndCB3b3JrIG9uIEFuZHJvaWQgNytcbiAgICAgIGxldCBhZGIgPSBuZXcgQURCKCk7XG4gICAgICBpZiAoYXdhaXQgYWRiLmdldEFwaUxldmVsKCkgPiAyMykgcmV0dXJuIHRoaXMuc2tpcCgpOyAvL2VzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcblxuICAgICAgaW5pdGlhbExvY2FsZSA9IGF3YWl0IGdldExvY2FsZShhZGIpO1xuICAgIH0pO1xuICAgIGFmdGVyRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZHJpdmVyKSB7XG4gICAgICAgIGF3YWl0IGFuZHJvaWRIZWxwZXJzLmVuc3VyZURldmljZUxvY2FsZShkcml2ZXIuYWRiLCBudWxsLCBpbml0aWFsTG9jYWxlKTtcblxuICAgICAgICBhd2FpdCBkcml2ZXIuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYXBwIHN0cmluZ3Mgd2l0aCBkZWZhdWx0IGxvY2FsZS9sYW5ndWFnZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlciA9IGF3YWl0IGluaXREcml2ZXIoQVBJREVNT1NfQ0FQUyk7XG5cbiAgICAgIGxldCBzdHJpbmdzID0gYXdhaXQgZHJpdmVyLmdldFN0cmluZ3MoKTtcbiAgICAgIHN0cmluZ3MuaGVsbG9fd29ybGQuc2hvdWxkLmVxdWFsKCc8Yj5IZWxsbywgPGk+V29ybGQhPC9pPjwvYj4nKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhcHAgc3RyaW5ncyB3aGVuIGxhbmd1YWdlL2xvY2FsZSBzZXQgQHNraXAtY2knLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBkcml2ZXIgPSBhd2FpdCBpbml0RHJpdmVyKF8uZGVmYXVsdHMoe1xuICAgICAgICBsYW5ndWFnZTogJ2ZyJyxcbiAgICAgICAgbG9jYWxlOiAnQ0EnLFxuICAgICAgfSwgQVBJREVNT1NfQ0FQUykpO1xuXG4gICAgICBsZXQgc3RyaW5ncyA9IGF3YWl0IGRyaXZlci5nZXRTdHJpbmdzKCk7XG4gICAgICBzdHJpbmdzLmhlbGxvX3dvcmxkLnNob3VsZC5lcXVhbCgnPGI+Qm9uam91ciwgPGk+TW9uZGUhPC9pPjwvYj4nKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
